metawrap binning -o /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only -t 128 -m 500 -a /ocean/projects/ees240004p/hkittner/subsample_megahit_meta_large_noEC_S4_04_L001/final.contigs.fa --metabat2 --maxbin2 --concoct /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_1.fastq /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_2.fastq

------------------------------------------------------------------------------------------------------------------------
-----                                           Entered read type: paired                                          -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                  1 forward and 1 reverse read files detected                                 -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                     ALIGNING READS TO MAKE COVERAGE FILES                                    #####
########################################################################################################################

Warning: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only already exists.
rm: cannot remove '/ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/*checkm': No such file or directory

------------------------------------------------------------------------------------------------------------------------
-----             Looks like the assembly file is already coppied, but will re-transfer just in case to            -----
-----                                          avoid truncation problems.                                          -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                       Looks like there is a index of the assembly already. Skipping...                       -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                                   Aligning                                                   -----
-----          /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_1.fastq and           -----
-----          /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_2.fastq back          -----
-----                                                 to assembly                                                  -----
------------------------------------------------------------------------------------------------------------------------

[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (156, 218, 384)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 840)
[M::mem_pestat] mean and std.dev: (249.36, 148.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1068)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (231, 292, 362)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 624)
[M::mem_pestat] mean and std.dev: (297.54, 100.38)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 755)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 106, 256)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 676)
[M::mem_pestat] mean and std.dev: (144.78, 142.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 886)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 239, 321)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 645)
[M::mem_pestat] mean and std.dev: (233.13, 115.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 807)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (187, 265, 371)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 739)
[M::mem_pestat] mean and std.dev: (274.92, 149.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 923)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (236, 297, 367)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 629)
[M::mem_pestat] mean and std.dev: (302.45, 100.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 760)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 111, 246)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 648)
[M::mem_pestat] mean and std.dev: (140.51, 129.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 849)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (164, 222, 379)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 809)
[M::mem_pestat] mean and std.dev: (252.05, 138.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1024)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (167, 231, 370)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 776)
[M::mem_pestat] mean and std.dev: (258.06, 152.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 979)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (233, 295, 364)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 626)
[M::mem_pestat] mean and std.dev: (299.88, 100.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 757)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 96, 250)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 666)
[M::mem_pestat] mean and std.dev: (133.19, 132.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 874)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (145, 231, 339)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 727)
[M::mem_pestat] mean and std.dev: (240.33, 113.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 921)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (149, 226, 347)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 743)
[M::mem_pestat] mean and std.dev: (241.36, 128.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 941)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (234, 296, 365)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 627)
[M::mem_pestat] mean and std.dev: (300.71, 100.57)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 758)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (34, 94, 243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 661)
[M::mem_pestat] mean and std.dev: (134.32, 134.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 870)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 205, 297)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 621)
[M::mem_pestat] mean and std.dev: (226.81, 117.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 783)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (135, 228, 347)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 771)
[M::mem_pestat] mean and std.dev: (242.74, 138.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 983)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (237, 299, 369)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 633)
[M::mem_pestat] mean and std.dev: (304.06, 100.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 765)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 109, 245)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 655)
[M::mem_pestat] mean and std.dev: (137.17, 135.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 860)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 248, 371)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 787)
[M::mem_pestat] mean and std.dev: (285.08, 148.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 995)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (168, 264, 367)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 765)
[M::mem_pestat] mean and std.dev: (278.45, 147.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 964)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (232, 294, 365)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 631)
[M::mem_pestat] mean and std.dev: (299.64, 101.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 764)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (49, 119, 268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 706)
[M::mem_pestat] mean and std.dev: (151.86, 144.06)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 925)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 261, 397)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 891)
[M::mem_pestat] mean and std.dev: (265.22, 153.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1138)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (161, 275, 391)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 851)
[M::mem_pestat] mean and std.dev: (289.90, 165.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1081)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (236, 297, 367)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 629)
[M::mem_pestat] mean and std.dev: (302.28, 100.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 760)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 105, 245)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 651)
[M::mem_pestat] mean and std.dev: (144.51, 142.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 854)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (140, 222, 332)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 716)
[M::mem_pestat] mean and std.dev: (236.66, 143.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 908)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (132, 278, 427)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1017)
[M::mem_pestat] mean and std.dev: (293.01, 184.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1312)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (237, 299, 369)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 633)
[M::mem_pestat] mean and std.dev: (304.00, 101.17)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 765)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 113, 257)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 679)
[M::mem_pestat] mean and std.dev: (146.51, 140.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 890)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (187, 270, 428)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 910)
[M::mem_pestat] mean and std.dev: (287.25, 163.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1151)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (146, 230, 348)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 752)
[M::mem_pestat] mean and std.dev: (252.13, 134.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 954)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (232, 293, 364)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 628)
[M::mem_pestat] mean and std.dev: (298.70, 100.92)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 760)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (39, 100, 268)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 726)
[M::mem_pestat] mean and std.dev: (144.41, 146.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 955)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (180, 268, 365)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 735)
[M::mem_pestat] mean and std.dev: (277.92, 137.93)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 920)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (158, 236, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 737)
[M::mem_pestat] mean and std.dev: (251.11, 128.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 930)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (237, 298, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 630)
[M::mem_pestat] mean and std.dev: (303.34, 101.04)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 761)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 92, 200)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 520)
[M::mem_pestat] mean and std.dev: (118.85, 107.68)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 680)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 261, 400)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 886)
[M::mem_pestat] mean and std.dev: (276.04, 157.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1129)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (164, 249, 382)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 818)
[M::mem_pestat] mean and std.dev: (271.42, 155.42)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1036)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (234, 296, 366)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 630)
[M::mem_pestat] mean and std.dev: (301.20, 101.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 762)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 119, 237)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 617)
[M::mem_pestat] mean and std.dev: (136.66, 124.75)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 807)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (147, 246, 337)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 717)
[M::mem_pestat] mean and std.dev: (254.60, 130.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 907)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (166, 240, 374)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 790)
[M::mem_pestat] mean and std.dev: (274.40, 146.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 998)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (232, 295, 364)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 628)
[M::mem_pestat] mean and std.dev: (299.37, 100.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 760)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 102, 225)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 585)
[M::mem_pestat] mean and std.dev: (124.98, 116.34)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 765)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (157, 262, 385)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 841)
[M::mem_pestat] mean and std.dev: (260.42, 146.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1069)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (153, 241, 336)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 702)
[M::mem_pestat] mean and std.dev: (237.64, 100.09)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 885)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (236, 298, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 632)
[M::mem_pestat] mean and std.dev: (303.06, 101.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 764)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 111, 253)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 677)
[M::mem_pestat] mean and std.dev: (142.71, 141.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 889)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 226, 341)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 749)
[M::mem_pestat] mean and std.dev: (238.01, 115.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 953)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (145, 236, 377)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 841)
[M::mem_pestat] mean and std.dev: (278.94, 180.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1073)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (232, 295, 366)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 634)
[M::mem_pestat] mean and std.dev: (300.08, 101.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 768)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (42, 103, 229)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 603)
[M::mem_pestat] mean and std.dev: (127.24, 117.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 790)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (143, 240, 384)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 866)
[M::mem_pestat] mean and std.dev: (271.75, 165.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1107)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (153, 249, 374)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 816)
[M::mem_pestat] mean and std.dev: (261.47, 164.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1037)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (235, 299, 370)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 640)
[M::mem_pestat] mean and std.dev: (303.45, 102.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 775)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 100, 243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 643)
[M::mem_pestat] mean and std.dev: (139.30, 136.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 843)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (178, 252, 309)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 571)
[M::mem_pestat] mean and std.dev: (243.45, 106.60)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 702)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (141, 227, 353)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 777)
[M::mem_pestat] mean and std.dev: (255.54, 157.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 989)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (237, 301, 373)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 645)
[M::mem_pestat] mean and std.dev: (306.20, 103.39)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 781)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 97, 227)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 601)
[M::mem_pestat] mean and std.dev: (129.59, 124.84)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 788)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (143, 212, 279)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 551)
[M::mem_pestat] mean and std.dev: (212.11, 101.73)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 687)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (167, 244, 388)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 830)
[M::mem_pestat] mean and std.dev: (279.10, 160.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1051)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (234, 297, 368)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 636)
[M::mem_pestat] mean and std.dev: (302.13, 102.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 770)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 105, 240)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 634)
[M::mem_pestat] mean and std.dev: (139.97, 132.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 831)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (154, 269, 463)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1081)
[M::mem_pestat] mean and std.dev: (309.31, 193.12)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1390)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (173, 263, 406)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 872)
[M::mem_pestat] mean and std.dev: (288.31, 163.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1105)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (239, 301, 372)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 638)
[M::mem_pestat] mean and std.dev: (306.45, 102.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 771)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 107, 247)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 661)
[M::mem_pestat] mean and std.dev: (137.90, 135.48)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 868)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (144, 256, 363)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 801)
[M::mem_pestat] mean and std.dev: (278.08, 162.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1020)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (154, 251, 345)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 727)
[M::mem_pestat] mean and std.dev: (257.90, 134.82)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 918)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (235, 299, 370)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 640)
[M::mem_pestat] mean and std.dev: (303.99, 102.99)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 775)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (34, 94, 236)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 640)
[M::mem_pestat] mean and std.dev: (128.47, 130.55)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 842)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (137, 219, 292)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 602)
[M::mem_pestat] mean and std.dev: (229.22, 117.52)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 757)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (139, 217, 354)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 784)
[M::mem_pestat] mean and std.dev: (258.11, 153.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 999)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (236, 299, 370)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 638)
[M::mem_pestat] mean and std.dev: (303.77, 102.22)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 772)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 105, 252)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 668)
[M::mem_pestat] mean and std.dev: (135.53, 128.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 876)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (156, 238, 365)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 783)
[M::mem_pestat] mean and std.dev: (249.59, 141.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 992)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (179, 267, 377)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 773)
[M::mem_pestat] mean and std.dev: (288.78, 151.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 971)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (241, 303, 374)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 640)
[M::mem_pestat] mean and std.dev: (308.57, 102.50)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 773)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 113, 265)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 715)
[M::mem_pestat] mean and std.dev: (150.08, 148.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 940)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (161, 219, 344)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 710)
[M::mem_pestat] mean and std.dev: (254.38, 133.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 893)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (151, 226, 327)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 679)
[M::mem_pestat] mean and std.dev: (242.65, 130.79)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 855)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (212, 274, 347)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 617)
[M::mem_pestat] mean and std.dev: (282.19, 103.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 752)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 100, 235)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 623)
[M::mem_pestat] mean and std.dev: (131.78, 127.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 817)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (132, 208, 352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 792)
[M::mem_pestat] mean and std.dev: (232.73, 150.58)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1012)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (140, 209, 358)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 794)
[M::mem_pestat] mean and std.dev: (256.05, 149.02)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1012)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (215, 276, 350)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 620)
[M::mem_pestat] mean and std.dev: (284.84, 103.40)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 755)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (48, 108, 242)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 630)
[M::mem_pestat] mean and std.dev: (131.91, 120.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 824)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (170, 280, 395)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 845)
[M::mem_pestat] mean and std.dev: (296.69, 161.94)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1070)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (179, 229, 411)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 875)
[M::mem_pestat] mean and std.dev: (268.43, 174.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1107)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (211, 273, 347)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 619)
[M::mem_pestat] mean and std.dev: (281.43, 103.51)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 755)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (46, 104, 254)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 670)
[M::mem_pestat] mean and std.dev: (141.87, 140.63)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 878)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (132, 210, 323)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 705)
[M::mem_pestat] mean and std.dev: (228.18, 119.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 896)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (166, 257, 378)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 802)
[M::mem_pestat] mean and std.dev: (267.17, 145.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1014)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (215, 277, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 623)
[M::mem_pestat] mean and std.dev: (285.60, 103.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 759)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 102, 234)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 612)
[M::mem_pestat] mean and std.dev: (127.26, 119.32)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 801)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (149, 222, 339)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 719)
[M::mem_pestat] mean and std.dev: (231.97, 108.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 909)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (150, 275, 486)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1158)
[M::mem_pestat] mean and std.dev: (311.12, 225.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1494)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (211, 274, 348)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 622)
[M::mem_pestat] mean and std.dev: (282.77, 104.07)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 759)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 105, 262)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 698)
[M::mem_pestat] mean and std.dev: (148.67, 148.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 916)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (182, 253, 371)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 749)
[M::mem_pestat] mean and std.dev: (259.64, 141.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 938)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (137, 203, 291)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 599)
[M::mem_pestat] mean and std.dev: (207.13, 116.90)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 753)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (215, 276, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 623)
[M::mem_pestat] mean and std.dev: (285.12, 103.80)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 759)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (41, 99, 245)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 653)
[M::mem_pestat] mean and std.dev: (129.10, 126.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 857)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (169, 247, 341)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 685)
[M::mem_pestat] mean and std.dev: (257.56, 134.76)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 857)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (138, 221, 324)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 696)
[M::mem_pestat] mean and std.dev: (253.83, 154.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 882)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (212, 275, 350)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 626)
[M::mem_pestat] mean and std.dev: (283.98, 104.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 764)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 100, 236)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 620)
[M::mem_pestat] mean and std.dev: (132.71, 128.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 812)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (169, 260, 352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 718)
[M::mem_pestat] mean and std.dev: (255.70, 125.28)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 901)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (136, 240, 352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 784)
[M::mem_pestat] mean and std.dev: (246.92, 144.15)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1000)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (213, 275, 350)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 624)
[M::mem_pestat] mean and std.dev: (284.01, 104.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 761)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (38, 102, 242)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 650)
[M::mem_pestat] mean and std.dev: (133.96, 131.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 854)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (138, 223, 391)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 897)
[M::mem_pestat] mean and std.dev: (256.68, 169.95)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1150)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (158, 237, 322)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 650)
[M::mem_pestat] mean and std.dev: (233.67, 108.87)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 814)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (214, 276, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 625)
[M::mem_pestat] mean and std.dev: (285.25, 104.56)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 762)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 108, 261)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 697)
[M::mem_pestat] mean and std.dev: (144.25, 141.30)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 915)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (158, 233, 320)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 644)
[M::mem_pestat] mean and std.dev: (230.73, 100.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 806)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (161, 218, 304)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 590)
[M::mem_pestat] mean and std.dev: (226.89, 126.78)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 734)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (209, 272, 346)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 620)
[M::mem_pestat] mean and std.dev: (280.84, 103.59)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 757)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (47, 104, 230)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 596)
[M::mem_pestat] mean and std.dev: (129.99, 121.89)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 779)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (150, 264, 358)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 774)
[M::mem_pestat] mean and std.dev: (274.97, 160.08)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 982)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (171, 257, 411)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 891)
[M::mem_pestat] mean and std.dev: (286.03, 173.31)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1131)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (214, 276, 352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 628)
[M::mem_pestat] mean and std.dev: (285.77, 104.70)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 766)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (44, 103, 231)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 605)
[M::mem_pestat] mean and std.dev: (129.85, 122.27)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 792)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (172, 285, 440)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 976)
[M::mem_pestat] mean and std.dev: (304.95, 199.00)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1244)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (158, 250, 425)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 959)
[M::mem_pestat] mean and std.dev: (288.78, 180.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1226)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (209, 273, 348)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 626)
[M::mem_pestat] mean and std.dev: (281.84, 105.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 765)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (40, 104, 258)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 694)
[M::mem_pestat] mean and std.dev: (130.20, 130.66)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 912)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 302, 470)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1092)
[M::mem_pestat] mean and std.dev: (291.97, 181.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1403)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (152, 246, 402)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 902)
[M::mem_pestat] mean and std.dev: (271.02, 161.16)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1152)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (215, 280, 357)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 641)
[M::mem_pestat] mean and std.dev: (289.15, 107.26)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 783)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (37, 100, 229)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 613)
[M::mem_pestat] mean and std.dev: (128.02, 123.64)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 805)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (159, 257, 476)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1110)
[M::mem_pestat] mean and std.dev: (302.38, 197.21)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1427)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (139, 236, 429)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1009)
[M::mem_pestat] mean and std.dev: (265.31, 166.23)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1299)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (211, 274, 351)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 631)
[M::mem_pestat] mean and std.dev: (284.06, 106.01)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 771)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 102, 243)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 643)
[M::mem_pestat] mean and std.dev: (131.60, 128.37)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 843)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (163, 277, 386)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 832)
[M::mem_pestat] mean and std.dev: (279.00, 149.18)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1055)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (132, 203, 338)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 750)
[M::mem_pestat] mean and std.dev: (244.64, 153.88)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 956)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (217, 280, 357)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 637)
[M::mem_pestat] mean and std.dev: (289.46, 106.53)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 777)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (43, 109, 257)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 685)
[M::mem_pestat] mean and std.dev: (140.01, 141.43)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 899)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (173, 273, 435)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 959)
[M::mem_pestat] mean and std.dev: (304.50, 187.19)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1221)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (160, 253, 467)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 1081)
[M::mem_pestat] mean and std.dev: (302.76, 217.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1388)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (212, 275, 352)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 632)
[M::mem_pestat] mean and std.dev: (285.12, 106.13)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 772)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (36, 92, 236)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 636)
[M::mem_pestat] mean and std.dev: (129.84, 133.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 836)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (170, 238, 408)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 884)
[M::mem_pestat] mean and std.dev: (270.00, 168.29)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1122)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (137, 196, 314)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 668)
[M::mem_pestat] mean and std.dev: (222.15, 126.97)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 845)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (216, 279, 356)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 636)
[M::mem_pestat] mean and std.dev: (288.82, 106.33)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 776)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (45, 107, 248)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 654)
[M::mem_pestat] mean and std.dev: (140.38, 136.35)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 857)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (135, 219, 311)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 663)
[M::mem_pestat] mean and std.dev: (222.85, 128.20)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 839)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[M::mem_pestat] analyzing insert size distribution for orientation FF...
[M::mem_pestat] (25, 50, 75) percentile: (139, 237, 380)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 862)
[M::mem_pestat] mean and std.dev: (244.38, 155.85)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1103)
[M::mem_pestat] analyzing insert size distribution for orientation FR...
[M::mem_pestat] (25, 50, 75) percentile: (219, 282, 360)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 642)
[M::mem_pestat] mean and std.dev: (292.14, 107.49)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 783)
[M::mem_pestat] analyzing insert size distribution for orientation RF...
[M::mem_pestat] (25, 50, 75) percentile: (52, 127, 277)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 727)
[M::mem_pestat] mean and std.dev: (157.21, 141.98)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 952)
[M::mem_pestat] analyzing insert size distribution for orientation RR...
[M::mem_pestat] (25, 50, 75) percentile: (148, 252, 410)
[M::mem_pestat] low and high boundaries for computing mean and std.dev: (1, 934)
[M::mem_pestat] mean and std.dev: (276.15, 174.54)
[M::mem_pestat] low and high boundaries for proper pairs: (1, 1196)
[M::mem_pestat] skip orientation FF
[M::mem_pestat] skip orientation RF
[M::mem_pestat] skip orientation RR
[main] Version: 0.7.17-r1188
[main] CMD: bwa mem -v 1 -t 128 /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/assembly.fa /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_1.fastq /ocean/projects/ees240004p/hkittner/trimmomatic_output/S4_04_L001_paired_trim_2.fastq
[main] Real time: 1776.506 sec; CPU: 157923.104 sec

------------------------------------------------------------------------------------------------------------------------
-----                               Sorting the S4_04_L001_paired_trim alignment file                              -----
------------------------------------------------------------------------------------------------------------------------

[bam_sort_core] merging from 128 files and 128 in-memory blocks...

########################################################################################################################
#####                                               RUNNING METABAT2                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                          making contig depth file...                                         -----
------------------------------------------------------------------------------------------------------------------------

Output depth matrix to /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/metabat_depth.txt
Output matrix to /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/metabat_depth.txt
Opening 1 bams
Consolidating headers
Processing bam files
Thread 0 finished: S4_04_L001_paired_trim.bam with 332396598 reads and 163782830 readsWellMapped
Creating depth matrix file: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/metabat_depth.txt
Closing most bam files
Closing last bam file
Finished

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with metaBAT2...                                      -----
------------------------------------------------------------------------------------------------------------------------

MetaBAT 2 (v2.12.1) using minContig 1500, minCV 1.0, minCVSum 1.0, maxP 95%, minS 60, and maxEdges 200. 
100 bins (340772895 bases in total) formed.

------------------------------------------------------------------------------------------------------------------------
-----                              metaBAT2 finished successfully, and found 101 bins!                             -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                                RUNNING MAXBIN2                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                          making contig depth file...                                         -----
------------------------------------------------------------------------------------------------------------------------

Output depth matrix to /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/mb2_master_depth.txt
Calculating intra contig depth variance
Output matrix to /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/mb2_master_depth.txt
Opening 1 bams
Consolidating headers
Processing bam files
Thread 0 finished: S4_04_L001_paired_trim.bam with 332396598 reads and 163782830 readsWellMapped
Creating depth matrix file: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/mb2_master_depth.txt
Closing most bam files
Closing last bam file
Finished

------------------------------------------------------------------------------------------------------------------------
-----                    split master contig depth file into individual files for maxbin2 input                    -----
------------------------------------------------------------------------------------------------------------------------

processing S4_04_L001_paired_trim.bam depth file...
MaxBin 2.2.6
No Contig file. Please specify contig file by -contig
MaxBin - a metagenomics binning software.
Usage:
  run_MaxBin.pl
    -contig (contig file)
    -out (output file)

   (Input reads and abundance information)
    [-reads (reads file) -reads2 (readsfile) -reads3 (readsfile) -reads4 ... ]
    [-abund (abundance file) -abund2 (abundfile) -abund3 (abundfile) -abund4 ... ]

   (You can also input lists consisting of reads and abundance files)
    [-reads_list (list of reads files)]
    [-abund_list (list of abundance files)]

   (Other parameters)
    [-min_contig_length (minimum contig length. Default 1000)]
    [-max_iteration (maximum Expectation-Maximization algorithm iteration number. Default 50)]
    [-thread (thread num; default 1)]
    [-prob_threshold (probability threshold for EM final classification. Default 0.9)]
    [-plotmarker]
    [-markerset (marker gene sets, 107 (default) or 40.  See README for more information.)]

  (for debug purpose)
    [-version] [-v] (print version number)
    [-verbose]
    [-preserve_intermediate]

  Please specify either -reads or -abund information.
  You can input multiple reads and/or abundance files at the same time.
  Please read README file for more details.

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with MaxBin2...                                       -----
------------------------------------------------------------------------------------------------------------------------

MaxBin 2.2.6
Input contig: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/assembly.fa
Thread: 128
Min contig length: 1000
out header: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin
Located abundance file [/ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/mb2_S4_04_L001_paired_trim.txt]
Searching against 107 marker genes to find starting seed contigs for [/ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/assembly.fa]...
Running FragGeneScan....
Running HMMER hmmsearch....
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin -min_contig_length 1000 -thread 128
Loaded 100000 sequences
Loaded 200000 sequences
Loaded 300000 sequences
Loaded 400000 sequences
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_10044694 [5.754310]
	k87_11466711 [170.433000]
	k87_380534 [8.144440]
	k87_9951982 [6.242000]
	k87_287414 [20.893300]
	k87_2182932 [5.083520]
	k87_11564290 [4.372660]
	k87_4268739 [16.772300]
	k87_10427649 [7.083020]
	k87_8911780 [8.083780]
	k87_5027772 [34.913600]
	k87_5596379 [61.423400]
	k87_4838591 [5.110130]
	k87_385031 [10.082300]
	k87_8439501 [3.583200]
	k87_954981 [47.537700]
	k87_6451312 [9.575080]
	k87_10146498 [9.128850]
	k87_576410 [6.420090]
	k87_8915356 [13.937100]
	k87_9674589 [8.501130]
	k87_1526899 [4.149170]
	k87_389673 [8.831250]
	k87_5223095 [6.386980]
	k87_10813720 [7.717640]
	k87_1717820 [3.734410]
	k87_3518269 [4.392420]
	k87_7403600 [72.871400]
	k87_2098590 [16.355500]
	k87_8826149 [3.318730]
	k87_3141672 [4.568240]
	k87_9206276 [6.287390]
	k87_3712328 [35.095800]
	k87_11104992 [5.913420]
	k87_10442581 [4.426290]
	k87_1441116 [9.237650]
	k87_8074281 [4.734400]
	k87_6275869 [6.774370]
	k87_1443517 [22.270600]
	k87_876445 [17.041700]
	k87_7320992 [10.749400]
	k87_7227223 [4.226070]
	k87_27903 [3.994800]
	k87_3818096 [5.224830]
	k87_2492637 [10.283100]
	k87_7610903 [4.673810]
	k87_977832 [3.991910]
	k87_11306809 [5.750840]
	k87_9696491 [6.292460]
	k87_695237 [6.436530]
	k87_4770323 [4.436800]
	k87_2309437 [7.474700]
	k87_4585787 [4.274390]
	k87_10461657 [4.189250]
	k87_9704893 [5.644890]
	k87_1083323 [4.817190]
	k87_4210702 [9.164370]
	k87_11886339 [4.080270]
	k87_10275411 [8.628800]
	k87_8949708 [4.252250]
	k87_8664836 [9.892010]
	k87_9802495 [11.465800]
	k87_6770720 [5.129120]
	k87_10466655 [7.464150]
	k87_3552684 [7.005780]
	k87_995013 [6.003380]
	k87_4786059 [2.760390]
	k87_1849134 [13.945200]
	k87_7155660 [6.726550]
	k87_1092546 [5.317950]
	k87_5641378 [18.340300]
	k87_11137295 [4.985190]
	k87_1283306 [5.135420]
	k87_4031590 [4.835420]
	k87_6021107 [3.209010]
	k87_11423139 [4.290900]
	k87_7918288 [4.258390]
	k87_6876304 [4.814750]
	k87_2897309 [5.441920]
	k87_4887364 [2.991580]
	k87_8963171 [4.763410]
	k87_2425824 [4.356420]
	k87_11143864 [4.075110]
	k87_6975229 [2.801880]
	k87_10955833 [3.781970]
	k87_11430006 [3.043810]
	k87_5082123 [2.522590]
	k87_4039980 [3.822380]
	k87_10768310 [5.110880]
	k87_8968882 [16.265700]
	k87_11432024 [7.438450]
	k87_8589755 [60.673500]
	k87_345859 [2.610330]
	k87_633084 [5.408080]
	k87_3286319 [4.569660]
	k87_6413767 [4.258450]
	k87_11531430 [5.281690]
	k87_8026166 [11.485800]
	k87_10775316 [4.878500]
	k87_8690531 [5.379550]
	k87_637840 [7.114110]
	k87_3008898 [21.844500]
	k87_7273774 [6.266330]
	k87_7842069 [14.524600]
	k87_11254484 [6.662150]
	k87_5096885 [7.622160]
	k87_5761905 [5.599360]
	k87_4246574 [10.745100]
	k87_6426499 [6.806250]
	k87_2542260 [2.609450]
	k87_7374803 [6.487550]
	k87_6901164 [3.594220]
	k87_1029389 [5.360380]
	k87_2640451 [6.220310]
	k87_176423 [9.063950]
	k87_4441202 [6.340740]
	k87_11264044 [3.936060]
	k87_6623914 [3.343460]
	k87_9467675 [4.756020]
	k87_9657110 [5.464890]
	k87_8427065 [6.545350]
	k87_10514581 [4.337310]
	k87_10610091 [4.812200]
	k87_1798958 [6.309720]
	k87_3979318 [5.718570]
Get 125 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 108650 (21.91%)
Elapsed time:  0 days 07:42:00
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_2018806 [5.060060]
	k87_7194655 [2.659800]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:57
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_9485537 [20.140900]
	k87_7597036 [19.218500]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0009.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0009.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0009.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_2596579 [4.914400]
	k87_11044845 [4.642780]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_2228141 [5.715910]
	k87_4886714 [3.910460]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:59
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0018.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0018.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0018.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4767887 [4.909620]
	k87_9937869 [4.796940]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0023.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0023.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0023.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4012877 [3.684970]
	k87_9236492 [7.406660]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:57
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_8338543 [4.891130]
	k87_7501983 [9.185500]
	k87_5540285 [8.140740]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 346 (9.56%)
Elapsed time:  0 days 00:01:57
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0035.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0035.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0035.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_3475403 [4.752570]
	k87_3024525 [8.485450]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0036.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0036.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0036.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_6269681 [7.213410]
	k87_10379818 [3.830650]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:54
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0037.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0037.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0037.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_959388 [3.888300]
	k87_6341701 [6.209070]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0042.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0042.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0042.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1711040 [4.304650]
	k87_4726234 [3.739430]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:58
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0045.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0045.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0045.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4282918 [11.509400]
	k87_1872725 [6.939110]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_10158790 [3.540040]
	k87_3674697 [2.885650]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0052.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0052.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0052.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_5410210 [7.449150]
	k87_5791868 [5.115600]
	k87_1065585 [7.173170]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 53 (1.51%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0056.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0056.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0056.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4788236 [4.987570]
	k87_2914719 [8.088500]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0059.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0059.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0059.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_5439728 [6.808110]
	k87_1694493 [5.441390]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0066.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0066.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0066.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_74919 [9.158010]
	k87_10896362 [3.691670]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:59
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_392038 [2.177780]
	k87_11019792 [4.419600]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0072.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0072.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0072.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_7054378 [6.596660]
	k87_7282156 [3.359150]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:58
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1833508 [12.189800]
	k87_1276021 [3.779350]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:02:00
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0075.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0075.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0075.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_8652133 [3.854950]
	k87_4446292 [2.783530]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_8911122 [4.817280]
	k87_8612414 [3.537620]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:57
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0080.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0080.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0080.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1327777 [6.197760]
	k87_2181823 [4.972240]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0081.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0081.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0081.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_129244 [8.414400]
	k87_2082040 [11.531100]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4186829 [12.772000]
	k87_5332301 [11.386300]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:54
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0097.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0097.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0097.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_8461012 [5.682980]
	k87_7822578 [7.344860]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0108.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0108.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0108.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_11193120 [10.106900]
	k87_3600060 [5.449160]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0109.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0109.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0109.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_7508547 [6.801640]
	k87_4924366 [3.937500]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0112.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0112.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0112.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_10906555 [8.766700]
	k87_9416893 [5.153570]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:52
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1621600 [4.861170]
	k87_5346894 [3.841940]
	k87_816329 [5.071490]
Get 3 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 85 (2.65%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0119.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0119.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0119.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_682314 [6.415990]
	k87_5528441 [4.826750]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:54
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0120.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0120.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0120.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1155751 [4.631640]
	k87_11901040 [9.969500]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0125.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0125.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0125.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_5121276 [5.360900]
	k87_8762492 [4.247750]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.out.0002.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.out.0002.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0001.out.0002.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_2018806 [5.060060]
	k87_7194655 [2.659800]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.out.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.out.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0005.out.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_9485537 [20.140900]
	k87_7597036 [19.218500]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:52
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.out.0002.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.out.0002.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0015.out.0002.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_9867466 [4.542350]
	k87_11145244 [9.358510]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:56
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_32997 [4.731300]
	k87_7730850 [3.218520]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:52
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0003.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0003.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0032.out.0003.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_5540285 [8.140740]
	k87_4135870 [9.269720]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:54
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.out.0002.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.out.0002.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0049.out.0002.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4376456 [5.540220]
	k87_3106343 [5.586610]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:53
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.out.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.out.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0070.out.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_7804142 [4.237920]
	k87_5068831 [4.175890]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:52
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.out.0002.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.out.0002.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0073.out.0002.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_1833508 [12.189800]
	k87_1276021 [3.779350]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:55
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.out.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.out.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0079.out.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_5545980 [6.591740]
	k87_5870635 [4.131210]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:54
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.out.0001.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.out.0001.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0090.out.0001.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_4186829 [12.772000]
	k87_5332301 [11.386300]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:51
Done data collection. Running MaxBin...
Command: /jet/home/hkittner/miniforge3/envs/metawrap-env/opt/MaxBin-2.2.6/src/MaxBin -fasta /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.out.0002.fasta  -abund /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.contig.tmp.abund1 -seed /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.out.0002.out.seed -out /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.0116.out.0002.out -min_contig_length 1000 -thread 128
Minimum contig length set to 1000.
Reading seed list...
Looking for seeds in sequences.
	k87_7509280 [7.041700]
	k87_1001739 [7.244160]
Get 2 seeds.

Start EM process.
Iteration 1
Iteration 2
Iteration 3
Iteration 4
Iteration 5
Iteration 6
Iteration 7
Iteration 8
Iteration 9
Iteration 10
Iteration 11
Iteration 12
Iteration 13
Iteration 14
Iteration 15
Iteration 16
Iteration 17
Iteration 18
Iteration 19
Iteration 20
Iteration 21
Iteration 22
Iteration 23
Iteration 24
Iteration 25
Iteration 26
Iteration 27
Iteration 28
Iteration 29
Iteration 30
Iteration 31
Iteration 32
Iteration 33
Iteration 34
Iteration 35
Iteration 36
Iteration 37
Iteration 38
Iteration 39
Iteration 40
Iteration 41
Iteration 42
Iteration 43
Iteration 44
Iteration 45
Iteration 46
Iteration 47
Iteration 48
Iteration 49
Iteration 50

EM finishes successfully.

Classifying sequences based on the EM result.
Minimum probability for binning: 0.50
Ignoring 0 bins without any sequences.
Number of unclassified sequences: 0 (0.00%)
Elapsed time:  0 days 00:01:52













































bin.002.marker.fasta
bin.003.marker.fasta
bin.004.marker.fasta
bin.005.marker.fasta
bin.006.marker.fasta
bin.007.marker.fasta
bin.010.marker.fasta
bin.011.marker.fasta
bin.012.marker.fasta
bin.013.marker.fasta
bin.014.marker.fasta
bin.015.marker.fasta
bin.016.marker.fasta
bin.017.marker.fasta
bin.018.marker.fasta
bin.019.marker.fasta
bin.020.marker.fasta
bin.021.marker.fasta
bin.022.marker.fasta
bin.023.marker.fasta
bin.024.marker.fasta
bin.025.marker.fasta
bin.026.marker.fasta
bin.027.marker.fasta
bin.028.marker.fasta
bin.029.marker.fasta
bin.030.marker.fasta
bin.031.marker.fasta
bin.032.marker.fasta
bin.033.marker.fasta
bin.034.marker.fasta
bin.035.marker.fasta
bin.037.marker.fasta
bin.038.marker.fasta
bin.039.marker.fasta
bin.040.marker.fasta
bin.041.marker.fasta
bin.042.marker.fasta
bin.043.marker.fasta
bin.044.marker.fasta
bin.045.marker.fasta
bin.046.marker.fasta
bin.047.marker.fasta
bin.048.marker.fasta
bin.049.marker.fasta
bin.050.marker.fasta
bin.052.marker.fasta
bin.053.marker.fasta
bin.054.marker.fasta
bin.055.marker.fasta
bin.056.marker.fasta
bin.057.marker.fasta
bin.058.marker.fasta
bin.059.marker.fasta
bin.060.marker.fasta
bin.061.marker.fasta
bin.062.marker.fasta
bin.063.marker.fasta
bin.064.marker.fasta
bin.065.marker.fasta
bin.066.marker.fasta
bin.067.marker.fasta
bin.068.marker.fasta
bin.069.marker.fasta
bin.070.marker.fasta
bin.071.marker.fasta
bin.072.marker.fasta
bin.073.marker.fasta
bin.074.marker.fasta
bin.075.marker.fasta
bin.077.marker.fasta
bin.078.marker.fasta
bin.079.marker.fasta
bin.080.marker.fasta
bin.081.marker.fasta
bin.082.marker.fasta
bin.083.marker.fasta
bin.084.marker.fasta
bin.085.marker.fasta
bin.086.marker.fasta
bin.087.marker.fasta
bin.088.marker.fasta
bin.089.marker.fasta
bin.090.marker.fasta
bin.091.marker.fasta
bin.092.marker.fasta
bin.093.marker.fasta
bin.094.marker.fasta
bin.095.marker.fasta
bin.096.marker.fasta
bin.097.marker.fasta
bin.098.marker.fasta
bin.099.marker.fasta
bin.100.marker.fasta
bin.101.marker.fasta
bin.102.marker.fasta
bin.103.marker.fasta
bin.104.marker.fasta
bin.106.marker.fasta
bin.107.marker.fasta
bin.108.marker.fasta
bin.109.marker.fasta
bin.110.marker.fasta
bin.111.marker.fasta
bin.112.marker.fasta
bin.113.marker.fasta
bin.114.marker.fasta
bin.115.marker.fasta
bin.116.marker.fasta
bin.117.marker.fasta
bin.118.marker.fasta
bin.119.marker.fasta
bin.120.marker.fasta
bin.121.marker.fasta
bin.122.marker.fasta
bin.123.marker.fasta
bin.124.marker.fasta
bin.125.marker.fasta
bin.126.marker.fasta
bin.127.marker.fasta
bin.128.marker.fasta
bin.129.marker.fasta
bin.130.marker.fasta
bin.131.marker.fasta
bin.132.marker.fasta
bin.133.marker.fasta
bin.134.marker.fasta
bin.135.marker.fasta
bin.136.marker.fasta
bin.137.marker.fasta
bin.138.marker.fasta
bin.139.marker.fasta
bin.140.marker.fasta
bin.141.marker.fasta
bin.142.marker.fasta
bin.143.marker.fasta
bin.144.marker.fasta
bin.145.marker.fasta
bin.146.marker.fasta
bin.147.marker.fasta
bin.148.marker.fasta
bin.149.marker.fasta
bin.150.marker.fasta
bin.151.marker.fasta
bin.152.marker.fasta
bin.153.marker.fasta
bin.154.marker.fasta
bin.155.marker.fasta
bin.156.marker.fasta
bin.157.marker.fasta
bin.158.marker.fasta
bin.159.marker.fasta
bin.160.marker.fasta
bin.161.marker.fasta
bin.162.marker.fasta
bin.163.marker.fasta
bin.164.marker.fasta
bin.165.marker.fasta
bin.166.marker.fasta
bin.167.marker.fasta
bin.168.marker.fasta
bin.169.marker.fasta
bin.170.marker.fasta
bin.171.marker.fasta
bin.172.marker.fasta
Deleting intermediate files.


========== Job finished ==========
Yielded 172 bins for contig (scaffold) file /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/assembly.fa

Here are the output files for this run.
Please refer to the README file for further details.

Summary file: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.summary
Marker counts: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.marker
Marker genes for each bin: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.marker_of_each_gene.tar.gz
Bin files: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.001.fasta - /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.172.fasta
Unbinned sequences: /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/maxbin2_out/bin.noclass


========== Elapsed Time ==========
9 hours 16 minutes and 36 seconds.


------------------------------------------------------------------------------------------------------------------------
-----                              MaxBin2 finished successfully, and found 172 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                                RUNNING CONCOCT                                               #####
########################################################################################################################


------------------------------------------------------------------------------------------------------------------------
-----                                       indexing .bam alignment files...                                       -----
------------------------------------------------------------------------------------------------------------------------

/ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/S4_04_L001_paired_trim.bam

------------------------------------------------------------------------------------------------------------------------
-----                             cutting up contigs into 10kb fragments for CONCOCT...                            -----
------------------------------------------------------------------------------------------------------------------------


------------------------------------------------------------------------------------------------------------------------
-----                                    estimating contig fragment coverage...                                    -----
------------------------------------------------------------------------------------------------------------------------

/jet/home/hkittner/miniforge3/envs/metawrap-env/bin/concoct_coverage_table.py:48: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\t'.
  df = pd.read_table(fh, header=None)
usage: concoct [-h] [--coverage_file COVERAGE_FILE]
               [--composition_file COMPOSITION_FILE] [-c CLUSTERS]
               [-k KMER_LENGTH] [-t THREADS] [-l LENGTH_THRESHOLD]
               [-r READ_LENGTH] [--total_percentage_pca TOTAL_PERCENTAGE_PCA]
               [-b BASENAME] [-s SEED] [-i ITERATIONS] [-e EPSILON]
               [--no_cov_normalization] [--no_total_coverage]
               [--no_original_data] [-o] [-d] [-v]

optional arguments:
  -h, --help            show this help message and exit
  --coverage_file COVERAGE_FILE
                        specify the coverage file, containing a table where
                        each row correspond to a contig, and each column
                        correspond to a sample. The values are the average
                        coverage for this contig in that sample. All values
                        are separated with tabs.
  --composition_file COMPOSITION_FILE
                        specify the composition file, containing sequences in
                        fasta format. It is named the composition file since
                        it is used to calculate the kmer composition (the
                        genomic signature) of each contig.
  -c CLUSTERS, --clusters CLUSTERS
                        specify maximal number of clusters for VGMM, default
                        400.
  -k KMER_LENGTH, --kmer_length KMER_LENGTH
                        specify kmer length, default 4.
  -t THREADS, --threads THREADS
                        Number of threads to use
  -l LENGTH_THRESHOLD, --length_threshold LENGTH_THRESHOLD
                        specify the sequence length threshold, contigs shorter
                        than this value will not be included. Defaults to
                        1000.
  -r READ_LENGTH, --read_length READ_LENGTH
                        specify read length for coverage, default 100
  --total_percentage_pca TOTAL_PERCENTAGE_PCA
                        The percentage of variance explained by the principal
                        components for the combined data.
  -b BASENAME, --basename BASENAME
                        Specify the basename for files or directory where
                        outputwill be placed. Path to existing directory or
                        basenamewith a trailing '/' will be interpreted as a
                        directory.If not provided, current directory will be
                        used.
  -s SEED, --seed SEED  Specify an integer to use as seed for clustering. 0
                        gives a random seed, 1 is the default seed and any
                        other positive integer can be used. Other values give
                        ArgumentTypeError.
  -i ITERATIONS, --iterations ITERATIONS
                        Specify maximum number of iterations for the VBGMM.
                        Default value is 500
  -e EPSILON, --epsilon EPSILON
                        Specify the epsilon for VBGMM. Default value is 1.0e-6
  --no_cov_normalization
                        By default the coverage is normalized with regards to
                        samples, then normalized with regards of contigs and
                        finally log transformed. By setting this flag you skip
                        the normalization and only do log transorm of the
                        coverage.
  --no_total_coverage   By default, the total coverage is added as a new
                        column in the coverage data matrix, independently of
                        coverage normalization but previous to log
                        transformation. Use this tag to escape this behaviour.
  --no_original_data    By default the original data is saved to disk. For big
                        datasets, especially when a large k is used for
                        compositional data, this file can become very large.
                        Use this tag if you don't want to save the original
                        data.
  -o, --converge_out    Write convergence info to files.
  -d, --debug           Debug parameters.
  -v, --version         show program's version number and exit

------------------------------------------------------------------------------------------------------------------------
-----                                       Starting binning with CONCOCT...                                       -----
------------------------------------------------------------------------------------------------------------------------

Up and running. Check /ocean/projects/ees240004p/hkittner/initial_binning_S4_04_L001only/work_files/concoct_out/log.txt for progress
/jet/home/hkittner/miniforge3/envs/metawrap-env/lib/python2.7/site-packages/concoct/input.py:82: FutureWarning: read_table is deprecated, use read_csv instead, passing sep='\t'.
  cov = p.read_table(cov_file, header=0, index_col=0)
Setting 128 OMP threads
Generate input data
0,-20591008.941673,200366.663755
1,-20414307.115883,176701.825790
2,-20311936.809381,102370.306502
3,-20248588.068919,63348.740462
4,-20204741.296925,43846.771994
5,-20175047.685427,29693.611498
6,-20155007.252588,20040.432838
7,-20137924.718815,17082.533773
8,-20122206.031548,15718.687267
9,-20108626.991610,13579.039938
10,-20097048.343577,11578.648033
11,-20087763.081797,9285.261780
12,-20080235.596143,7527.485654
13,-20073988.406108,6247.190035
14,-20069357.367652,4631.038456
15,-20065628.733895,3728.633757
16,-20062416.660027,3212.073868
17,-20059011.424786,3405.235241
18,-20055292.075217,3719.349569
19,-20050108.485297,5183.589919
20,-20045739.767036,4368.718261
21,-20039710.178290,6029.588747
22,-20035910.791762,3799.386528
23,-20029435.911713,6474.880048
24,-20024689.370815,4746.540898
25,-20014367.343025,10322.027791
26,-20008339.699298,6027.643727
27,-20002225.767836,6113.931462
28,-19995687.856988,6537.910848
29,-19985763.646207,9924.210782
30,-19980961.053549,4802.592658
31,-19973653.551671,7307.501878
32,-19962352.738843,11300.812828
33,-19952686.018589,9666.720253
34,-19949541.356738,3144.661852
35,-19944711.575504,4829.781234
36,-19941154.630570,3556.944934
37,-19935586.732512,5567.898057
38,-19928696.435015,6890.297497
39,-19927754.431797,942.003218
40,-19923790.088105,3964.343692
41,-19920806.372645,2983.715461
42,-19916697.907604,4108.465041
43,-19913582.005757,3115.901847
44,-19909467.396895,4114.608861
45,-19908250.289907,1217.106988
46,-19904098.529064,4151.760843
47,-19903051.738143,1046.790921
48,-19901177.572820,1874.165323
49,-19895308.165913,5869.406907
50,-19893747.479772,1560.686142
51,-19893247.306074,500.173698
52,-19888653.752404,4593.553670
53,-19888156.273519,497.478885
54,-19884662.377134,3493.896385
55,-19882385.383045,2276.994089
56,-19879989.006198,2396.376847
57,-19877645.044631,2343.961567
58,-19876185.185943,1459.858688
59,-19871778.635662,4406.550281
60,-19871339.139564,439.496097
61,-19870968.614762,370.524803
62,-19868575.221832,2393.392930
63,-19866058.064305,2517.157527
64,-19864758.762350,1299.301955
65,-19864377.516178,381.246172
66,-19860025.313741,4352.202437
67,-19858764.580762,1260.732979
68,-19857506.525503,1258.055258
69,-19856342.416211,1164.109292
70,-19855008.620393,1333.795818
71,-19854749.484995,259.135398
72,-19854310.898786,438.586209
73,-19852874.650025,1436.248761
74,-19850689.962910,2184.687116
75,-19850509.706609,180.256300
76,-19850417.332641,92.373969
77,-19849368.683742,1048.648899
78,-19849353.540119,15.143623
79,-19849246.315235,107.224884
80,-19849063.510802,182.804434
81,-19848802.293304,261.217498
82,-19847613.777525,1188.515779
83,-19846440.506264,1173.271260
84,-19844272.978246,2167.528018
85,-19844132.616246,140.362000
86,-19843086.553811,1046.062435
87,-19842085.306361,1001.247451
88,-19842042.841486,42.464875
89,-19840958.415468,1084.426017
90,-19839932.512703,1025.902766
91,-19839877.275858,55.236844
92,-19838889.183141,988.092718
93,-19838877.265161,11.917980
94,-19838824.922088,52.343073
95,-19838745.100869,79.821219
96,-19836674.287674,2070.813194
97,-19836544.949423,129.338252
98,-19835398.115799,1146.833624
99,-19835155.509221,242.606578
100,-19834910.645165,244.864056
101,-19833796.418144,1114.227021
102,-19833800.210761,3.792618
103,-19833764.661265,35.549496
104,-19833734.912532,29.748733
105,-19833773.482676,38.570144
106,-19833761.677204,11.805472
107,-19833725.740323,35.936881
108,-19833614.240633,111.499690
109,-19833532.725884,81.514749
110,-19833455.755149,76.970736
111,-19833368.692941,87.062208
112,-19833310.390606,58.302334
113,-19833120.188178,190.202428
114,-19832888.566160,231.622018
115,-19832764.568241,123.997919
116,-19831807.705324,956.862917
117,-19831788.585270,19.120054
118,-19830816.588833,971.996437
119,-19830755.294102,61.294731
120,-19830763.181310,7.887208
121,-19830754.626254,8.555056
122,-19830685.431002,69.195252
123,-19830563.895596,121.535406
124,-19830345.376249,218.519346
125,-19829260.060144,1085.316106
126,-19828226.694316,1033.365828
127,-19828263.382832,36.688516
128,-19828270.121090,6.738258
129,-19827381.477340,888.643750
130,-19827419.190127,37.712787
131,-19827415.354015,3.836111
132,-19827471.088206,55.734191
133,-19827534.275862,63.187656
134,-19827581.059059,46.783197
135,-19827605.322477,24.263417
136,-19827676.343729,71.021253
137,-19827725.257495,48.913766
138,-19827769.510701,44.253206
139,-19827829.485963,59.975262
140,-19827840.250425,10.764462
141,-19827881.707156,41.456731
142,-19827906.620170,24.913015
143,-19827865.295621,41.324549
144,-19827816.941570,48.354051
145,-19827784.778990,32.162580
146,-19827854.205862,69.426871
147,-19827900.997063,46.791201
148,-19827895.694636,5.302427
149,-19827933.561279,37.866643
150,-19827963.255154,29.693875
151,-19827040.549895,922.705260
152,-19827098.975148,58.425253
153,-19827150.458815,51.483667
154,-19827209.452595,58.993781
155,-19827252.049442,42.596847
156,-19827323.735197,71.685755
157,-19827378.365710,54.630513
158,-19827429.353880,50.988170
159,-19827495.589088,66.235208
160,-19827531.657405,36.068317
161,-19827584.560157,52.902752
162,-19827623.493226,38.933069
163,-19827666.156101,42.662875
164,-19827698.282104,32.126003
165,-19827749.903987,51.621883
166,-19827826.711942,76.807955
167,-19827887.997021,61.285079
168,-19827918.915938,30.918916
169,-19827955.168933,36.252995
170,-19827976.525734,21.356801
171,-19828001.685588,25.159854
172,-19828041.021546,39.335958
173,-19828079.932354,38.910808
174,-19828110.208548,30.276193
175,-19828167.017072,56.808524
176,-19828212.424172,45.407100
177,-19828247.098424,34.674252
178,-19828302.841695,55.743271
179,-19828367.961842,65.120147
180,-19828419.531721,51.569880
181,-19828437.996619,18.464898
182,-19828490.489568,52.492948
183,-19828542.855586,52.366019
184,-19828575.410858,32.555271
185,-19828643.731980,68.321122
186,-19828690.404349,46.672369
187,-19828738.000277,47.595928
188,-19828807.580981,69.580705
189,-19828873.487931,65.906950
190,-19828923.655534,50.167603
191,-19828966.389226,42.733692
192,-19828992.179306,25.790080
193,-19829049.264656,57.085350
194,-19829117.851336,68.586680
195,-19829164.471865,46.620529
196,-19829208.952566,44.480701
197,-19829208.691762,0.260804
198,-19829203.511768,5.179994
199,-19829222.136406,18.624638
200,-19829193.915388,28.221018
201,-19829098.334683,95.580705
202,-19828998.221334,100.113349
203,-19827983.777964,1014.443369
204,-19827993.561832,9.783868
205,-19828000.983109,7.421277
206,-19828009.814413,8.831304
207,-19828026.932889,17.118476
208,-19828064.593527,37.660638
209,-19828086.916542,22.323015
210,-19828094.196078,7.279536
211,-19828115.625965,21.429887
212,-19828105.012538,10.613428
213,-19828102.670427,2.342111
214,-19828091.338672,11.331755
215,-19828102.559265,11.220593
216,-19828088.149503,14.409762
217,-19828107.451889,19.302386
218,-19828118.141275,10.689386
219,-19828132.607928,14.466653
220,-19828132.268549,0.339379
221,-19828129.877942,2.390606
222,-19828117.728132,12.149811
223,-19828132.291665,14.563533
224,-19828140.477040,8.185375
225,-19828142.096377,1.619337
226,-19828145.544960,3.448583
227,-19828136.171118,9.373842
228,-19828124.858812,11.312306
229,-19828122.240528,2.618283
230,-19828131.829371,9.588842
231,-19828125.355075,6.474295
232,-19828106.570275,18.784801
233,-19828069.405927,37.164348
234,-19828033.278653,36.127274
235,-19828010.584929,22.693724
236,-19827958.944255,51.640674
237,-19827892.708598,66.235657
238,-19827843.960718,48.747880
239,-19827824.225642,19.735076
240,-19827802.176536,22.049105
241,-19827790.048604,12.127932
242,-19827792.212317,2.163713
243,-19827790.669513,1.542804
244,-19827785.067956,5.601557
245,-19827779.312131,5.755826
246,-19827787.269265,7.957134
247,-19827781.833062,5.436203
248,-19827788.153933,6.320871
249,-19827808.523934,20.370000
250,-19827822.373781,13.849848
251,-19827834.221222,11.847441
252,-19827835.617061,1.395839
253,-19827849.638620,14.021558
254,-19827864.433087,14.794468
255,-19827867.958581,3.525494
256,-19827882.329771,14.371189
257,-19827885.632924,3.303153
258,-19827894.842533,9.209609
259,-19827925.250131,30.407598
260,-19827946.419519,21.169387
261,-19827944.922896,1.496623
262,-19827937.938031,6.984866
263,-19827931.674059,6.263972
264,-19827924.126638,7.547421
265,-19827949.770177,25.643539
266,-19827956.542802,6.772625
267,-19827963.527298,6.984496
268,-19827977.629495,14.102197
269,-19827987.868608,10.239113
270,-19827989.842758,1.974150
271,-19828003.005080,13.162322
272,-19828019.413047,16.407968
273,-19828042.434466,23.021418
274,-19828049.849541,7.415075
275,-19828037.901599,11.947941
276,-19828024.886475,13.015124
277,-19828005.405702,19.480773
278,-19827988.684949,16.720754
279,-19827968.215722,20.469227
280,-19827964.664390,3.551331
281,-19827929.517815,35.146575
282,-19827878.034880,51.482935
283,-19827859.029845,19.005035
284,-19826869.650865,989.378980
285,-19826882.446442,12.795577
286,-19826902.657361,20.210919
287,-19826911.927572,9.270211
288,-19826911.468072,0.459500
289,-19826903.638083,7.829989
290,-19826901.329528,2.308555
291,-19826888.507089,12.822438
292,-19826892.305444,3.798354
293,-19826847.330648,44.974796
294,-19826831.414946,15.915702
295,-19826852.969261,21.554315
296,-19826830.075027,22.894234
297,-19826795.679186,34.395841
298,-19826764.714509,30.964677
299,-19825799.944036,964.770472
300,-19825798.994789,0.949247
301,-19825774.024752,24.970037
302,-19825797.338839,23.314087
303,-19825796.818544,0.520295
304,-19825774.493710,22.324834
305,-19825779.758924,5.265214
306,-19825796.174153,16.415230
307,-19825804.814588,8.640435
308,-19825812.423272,7.608683
309,-19825826.827063,14.403791
310,-19825830.859695,4.032633
311,-19825831.227934,0.368238
312,-19825823.297297,7.930636
313,-19825805.257895,18.039402
314,-19825795.645650,9.612245
315,-19825789.278596,6.367054
316,-19825790.398164,1.119568
317,-19825796.474290,6.076126
318,-19825800.205923,3.731633
319,-19825796.041970,4.163952
320,-19825775.062820,20.979150
321,-19825758.547532,16.515288
322,-19824714.685993,1043.861539
323,-19824709.851047,4.834947
324,-19824712.163198,2.312152
325,-19824713.409360,1.246162
326,-19824710.819993,2.589367
327,-19824719.606014,8.786021
328,-19824731.109933,11.503919
329,-19824739.114349,8.004416
330,-19824746.556773,7.442424
331,-19824752.343034,5.786261
332,-19824758.022390,5.679356
333,-19824767.830593,9.808203
334,-19824781.035647,13.205054
335,-19824791.050776,10.015129
336,-19824800.126773,9.075997
337,-19824800.379477,0.252704
338,-19824797.648464,2.731012
339,-19824798.565589,0.917124
340,-19824801.312815,2.747227
341,-19824818.082612,16.769797
342,-19824824.773547,6.690934
343,-19824829.792935,5.019388
344,-19824838.159156,8.366221
345,-19824841.588162,3.429006
346,-19824848.316261,6.728099
347,-19824850.982841,2.666580
348,-19824843.614791,7.368050
349,-19824829.284920,14.329872
350,-19824817.204733,12.080187
351,-19824819.808534,2.603801
352,-19824809.301680,10.506854
353,-19824787.413218,21.888462
354,-19824758.126140,29.287078
355,-19824736.642152,21.483988
356,-19824724.580943,12.061208
357,-19824701.963465,22.617479
358,-19824693.475456,8.488009
359,-19824697.649660,4.174204
360,-19824704.942201,7.292541
361,-19824701.920809,3.021392
362,-19824680.712775,21.208034
363,-19824665.653569,15.059206
364,-19824641.384302,24.269267
365,-19824613.511526,27.872777
366,-19824568.209937,45.301589
367,-19824540.808865,27.401072
368,-19824508.067644,32.741221
369,-19824479.534621,28.533023
370,-19824455.557944,23.976677
371,-19824416.433896,39.124047
372,-19824355.319032,61.114865
373,-19824295.698412,59.620620
374,-19824283.827838,11.870574
375,-19824219.605604,64.222234
376,-19824163.642929,55.962675
377,-19824091.864433,71.778496
378,-19824007.504989,84.359444
379,-19823973.402580,34.102409
380,-19823024.382409,949.020171
381,-19823031.614269,7.231860
382,-19823066.158015,34.543746
383,-19823103.932112,37.774097
384,-19823143.703431,39.771319
385,-19823124.661083,19.042347
386,-19823120.924553,3.736530
387,-19823149.454891,28.530338
388,-19823171.921573,22.466682
389,-19823186.977859,15.056286
390,-19823227.373915,40.396056
391,-19823263.041558,35.667643
392,-19823299.578638,36.537080
393,-19823321.598311,22.019674
394,-19823337.759909,16.161598
395,-19823360.608503,22.848594
396,-19823404.143486,43.534983
397,-19823419.565876,15.422390
398,-19823437.318675,17.752799
399,-19823458.003626,20.684951
400,-19823485.751309,27.747683
401,-19823504.330147,18.578838
402,-19823526.562106,22.231959
403,-19823549.287538,22.725431
404,-19823564.224103,14.936566
405,-19823576.413520,12.189417
406,-19823602.515575,26.102055
407,-19823606.863140,4.347565
408,-19823634.819024,27.955883
409,-19823667.667946,32.848922
410,-19823677.573846,9.905900
411,-19823684.316791,6.742945
412,-19823688.627479,4.310687
413,-19823696.154039,7.526561
414,-19823700.901569,4.747529
415,-19823711.038499,10.136931
416,-19823705.116202,5.922298
417,-19823710.852650,5.736448
418,-19823688.483715,22.368935
419,-19823671.734386,16.749329
420,-19823638.962862,32.771524
421,-19823600.564123,38.398739
422,-19823600.706952,0.142829
423,-19823574.714181,25.992771
424,-19822604.405354,970.308828
425,-19822615.790029,11.384675
426,-19822615.444018,0.346011
427,-19822619.281748,3.837730
428,-19822626.654980,7.373232
429,-19822634.431705,7.776725
430,-19822618.251499,16.180206
431,-19822621.499085,3.247586
432,-19822627.674239,6.175154
433,-19822637.103096,9.428857
434,-19822648.201400,11.098304
435,-19822648.530107,0.328707
436,-19822650.051986,1.521878
437,-19822656.046245,5.994259
438,-19822662.725853,6.679608
439,-19822683.769307,21.043453
440,-19822691.907584,8.138277
441,-19822662.176959,29.730625
442,-19822585.632774,76.544184
443,-19822497.445719,88.187055
444,-19822438.988213,58.457506
445,-19822400.809797,38.178417
446,-19822381.044151,19.765645
447,-19822372.603905,8.440246
448,-19822362.614847,9.989058
449,-19822362.973138,0.358290
450,-19822366.528128,3.554991
451,-19822350.274832,16.253297
452,-19822332.827074,17.447758
453,-19822321.182619,11.644455
454,-19822310.961957,10.220662
455,-19822299.668094,11.293863
456,-19822269.463832,30.204262
457,-19822259.751736,9.712096
458,-19822249.256726,10.495010
459,-19822230.961816,18.294910
460,-19822217.431053,13.530763
461,-19822206.557943,10.873110
462,-19822192.449418,14.108525
463,-19822193.253223,0.803805
464,-19822199.068221,5.814998
465,-19822183.677148,15.391073
466,-19822176.830585,6.846563
467,-19822159.766768,17.063816
468,-19822132.155253,27.611516
469,-19822110.055567,22.099685
470,-19822087.489087,22.566480
471,-19822075.607786,11.881301
472,-19822072.076376,3.531409
473,-19822038.594485,33.481892
474,-19821958.081865,80.512619
475,-19821891.729360,66.352506
476,-19821784.877053,106.852307
477,-19821704.216847,80.660206
478,-19820716.701875,987.514973
479,-19820727.919564,11.217689
480,-19820729.143112,1.223548
481,-19820725.477624,3.665487
482,-19820736.401032,10.923408
483,-19820737.697411,1.296379
484,-19820729.244807,8.452604
485,-19820735.632848,6.388041
486,-19820739.653808,4.020960
487,-19820735.024237,4.629571
488,-19820712.297538,22.726699
489,-19820692.857535,19.440003
490,-19820655.872182,36.985353
491,-19820650.716533,5.155649
492,-19820595.765193,54.951340
493,-19820599.867881,4.102688
494,-19820577.617555,22.250326
495,-19820525.213359,52.404197
496,-19820507.648542,17.564817
497,-19820472.107542,35.541000
498,-19819522.716983,949.390559
499,-19819531.161013,8.444031
500,-19819535.017841,3.856828
501,-19819538.533556,3.515715
502,-19819546.092857,7.559301
503,-19819553.036689,6.943832
504,-19819556.538060,3.501370
505,-19819555.110476,1.427584
506,-19819556.060033,0.949558
507,-19819556.579609,0.519575
508,-19819557.289704,0.710095
509,-19819561.498326,4.208622
510,-19819570.202841,8.704514
511,-19819567.166950,3.035890
512,-19819575.321922,8.154971
513,-19819580.380485,5.058564
514,-19819587.467085,7.086600
515,-19819598.355324,10.888239
516,-19819596.796618,1.558706
517,-19819607.068086,10.271468
518,-19819617.918550,10.850464
519,-19819623.775504,5.856954
520,-19819632.577563,8.802059
521,-19819638.623515,6.045952
522,-19819640.185387,1.561872
523,-19819641.991353,1.805966
524,-19819644.058694,2.067341
525,-19819640.447727,3.610967
526,-19819633.848827,6.598900
527,-19819635.310768,1.461941
528,-19819636.344600,1.033833
529,-19819633.593468,2.751132
530,-19819633.565616,0.027852
531,-19819631.828606,1.737010
532,-19819630.053286,1.775320
533,-19819623.569127,6.484159
534,-19819616.975727,6.593400
535,-19819624.117557,7.141830
536,-19819632.077697,7.960140
537,-19819633.710286,1.632588
538,-19819636.572147,2.861861
539,-19819639.540048,2.967902
540,-19819639.318186,0.221863
541,-19819640.018165,0.699980
542,-19819642.418515,2.400350
543,-19819642.995668,0.577152
544,-19819645.543782,2.548114
545,-19819645.207638,0.336143
546,-19819650.079366,4.871728
547,-19819657.333991,7.254625
548,-19819660.221073,2.887082
549,-19819660.549524,0.328451
550,-19819660.781213,0.231689
551,-19819661.543499,0.762287
552,-19819662.017864,0.474365
553,-19819661.649819,0.368044
554,-19819659.444620,2.205200
555,-19819662.691185,3.246566
556,-19819665.148436,2.457251
557,-19819669.511525,4.363089
558,-19819671.383779,1.872254
559,-19819671.742257,0.358478
560,-19819669.916227,1.826030
561,-19819667.420060,2.496167
562,-19819664.809563,2.610496
563,-19819662.359222,2.450341
564,-19819663.003775,0.644554
565,-19819661.581458,1.422318
566,-19819651.205227,10.376231
567,-19819640.898563,10.306664
568,-19819643.635742,2.737179
569,-19819649.135430,5.499688
570,-19819640.269141,8.866290
571,-19819622.646330,17.622811
572,-19819609.565324,13.081006
573,-19819568.619467,40.945857
574,-19819533.551930,35.067537
575,-19819519.850565,13.701365
576,-19819477.024953,42.825612
577,-19819438.604625,38.420328
578,-19819403.016991,35.587634
579,-19819355.848928,47.168063
580,-19818368.505223,987.343705
581,-19818375.175212,6.669989
582,-19818379.631901,4.456689
583,-19818383.373705,3.741804
584,-19818386.038404,2.664699
585,-19818388.313349,2.274945
586,-19818391.343025,3.029676
587,-19818391.136072,0.206953
588,-19818385.134741,6.001331
589,-19818382.697329,2.437412
590,-19818380.339864,2.357465
591,-19818383.480502,3.140638
592,-19818388.051831,4.571328
593,-19818389.918989,1.867158
594,-19818387.190499,2.728490
595,-19818381.284825,5.905674
596,-19818386.569448,5.284623
597,-19818388.204302,1.634854
598,-19818389.218397,1.014095
599,-19818386.840848,2.377549
600,-19818383.770472,3.070376
601,-19818383.284603,0.485870
602,-19818386.877240,3.592638
603,-19818392.858258,5.981018
604,-19818399.133891,6.275633
605,-19818400.923669,1.789778
606,-19818401.098915,0.175247
607,-19818405.971758,4.872842
608,-19818408.875027,2.903270
609,-19818408.734918,0.140110
610,-19818410.347531,1.612613
611,-19818414.280044,3.932513
612,-19818416.290680,2.010636
613,-19818419.707775,3.417095
614,-19818420.847823,1.140048
615,-19818423.691177,2.843354
616,-19818425.593076,1.901899
617,-19818426.656268,1.063192
618,-19818430.563781,3.907513
619,-19818435.456693,4.892912
620,-19818439.868238,4.411545
621,-19818445.012417,5.144180
622,-19818450.779705,5.767288
623,-19818457.231263,6.451558
624,-19818463.566637,6.335374
625,-19818464.629048,1.062411
626,-19818472.558443,7.929395
627,-19818481.194324,8.635881
628,-19818486.505394,5.311070
629,-19818487.414392,0.908998
630,-19818487.562315,0.147923
631,-19818487.448919,0.113395
632,-19818486.482245,0.966674
633,-19818485.407847,1.074399
634,-19818483.595756,1.812091
635,-19818481.464509,2.131247
636,-19818484.547103,3.082594
637,-19818490.952591,6.405489
638,-19818494.771606,3.819015
639,-19818499.278963,4.507356
640,-19818496.511588,2.767374
641,-19818502.890663,6.379075
642,-19818509.740872,6.850209
643,-19818517.419470,7.678598
644,-19818522.975835,5.556365
645,-19818525.246799,2.270964
646,-19818533.013457,7.766658
647,-19818532.817603,0.195854
648,-19818535.445199,2.627596
649,-19818537.582280,2.137081
650,-19818539.472284,1.890004
651,-19818544.334230,4.861945
652,-19818551.860350,7.526121
653,-19818556.347583,4.487233
654,-19818560.649137,4.301554
655,-19818566.170178,5.521041
656,-19818562.991075,3.179103
657,-19818564.419110,1.428035
658,-19818566.476267,2.057158
659,-19818567.380758,0.904491
660,-19818566.687447,0.693311
661,-19818567.598929,0.911481
662,-19818570.945321,3.346392
663,-19818576.347122,5.401802
664,-19818577.315858,0.968736
665,-19818574.473945,2.841914
666,-19818581.091983,6.618039
667,-19818585.112908,4.020925
668,-19818588.754460,3.641552
669,-19818596.787188,8.032728
670,-19818597.554090,0.766902
671,-19818598.946976,1.392886
672,-19818599.719583,0.772606
673,-19818603.518951,3.799368
674,-19818603.954178,0.435227
675,-19818603.911702,0.042476
676,-19818610.632296,6.720594
677,-19818613.082182,2.449886
678,-19818614.597622,1.515441
679,-19818614.252382,0.345240
680,-19818616.480316,2.227934
681,-19818620.286114,3.805798
682,-19818623.506317,3.220203
683,-19818624.774047,1.267730
684,-19818625.325848,0.551802
685,-19818625.518669,0.192821
686,-19818624.556194,0.962475
687,-19818621.499035,3.057159
688,-19818625.302176,3.803141
689,-19818631.849715,6.547539
690,-19818633.000292,1.150577
691,-19818634.164452,1.164160
692,-19818634.160201,0.004251
693,-19818636.198866,2.038665
694,-19818635.343425,0.855441
695,-19818635.698310,0.354885
696,-19818635.376559,0.321751
697,-19818637.428301,2.051742
698,-19818641.619502,4.191201
699,-19818639.936960,1.682542
700,-19818639.462003,0.474957
701,-19818644.642694,5.180690
702,-19818648.023641,3.380947
703,-19818649.740891,1.717251
704,-19818653.414668,3.673777
705,-19818656.147876,2.733207
706,-19818657.933669,1.785794
707,-19818655.785595,2.148074
708,-19818653.046782,2.738814
709,-19818658.804508,5.757727
710,-19818660.571362,1.766854
711,-19818662.669340,2.097978
712,-19818664.368533,1.699193
713,-19818669.989700,5.621167
714,-19818671.508695,1.518995
715,-19818677.204655,5.695959
716,-19818679.281257,2.076602
717,-19818679.031853,0.249404
718,-19818677.086374,1.945479
719,-19818681.655747,4.569373
720,-19818685.741781,4.086034
721,-19818684.084125,1.657657
722,-19818682.447868,1.636256
723,-19818682.360595,0.087273
724,-19818679.961677,2.398918
725,-19818676.714477,3.247200
726,-19818675.595987,1.118490
727,-19818674.988515,0.607472
728,-19818673.460389,1.528126
729,-19818672.517166,0.943222
730,-19818675.095297,2.578131
731,-19818674.761995,0.333303
732,-19818673.809884,0.952111
733,-19818672.108928,1.700955
734,-19818670.370798,1.738131
735,-19818671.277726,0.906928
736,-19818670.584594,0.693132
737,-19818668.547050,2.037544
738,-19818665.312827,3.234223
739,-19818670.099039,4.786212
740,-19818669.648322,0.450717
741,-19818667.189358,2.458964
742,-19818671.012474,3.823116
743,-19818674.854226,3.841753
744,-19818675.540357,0.686130
745,-19818675.853832,0.313475
746,-19818676.098204,0.244372
747,-19818676.336013,0.237809
748,-19818676.569805,0.233792
749,-19818676.757347,0.187542
750,-19818676.762508,0.005162
751,-19818676.188829,0.573680
752,-19818674.263153,1.925676
753,-19818675.127185,0.864033
754,-19818678.695906,3.568720
755,-19818680.578880,1.882974
756,-19818680.932531,0.353652
757,-19818678.597621,2.334910
758,-19818673.690660,4.906961
759,-19818679.135497,5.444837
760,-19818679.546583,0.411086
761,-19818681.086777,1.540194
762,-19818679.273192,1.813585
763,-19818677.953362,1.319830
764,-19818681.186410,3.233048
765,-19818681.704133,0.517724
766,-19818682.921127,1.216994
767,-19818682.994758,0.073631
768,-19818682.150808,0.843950
769,-19818679.410143,2.740665
770,-19818673.079473,6.330671
771,-19818675.203943,2.124471
772,-19818676.220407,1.016463
773,-19818674.289355,1.931051
774,-19818669.219284,5.070072
775,-19818670.062363,0.843080
776,-19818670.016476,0.045887
777,-19818672.040362,2.023886
778,-19818665.445779,6.594584
779,-19818656.920596,8.525183
780,-19818660.832667,3.912072
781,-19818657.736036,3.096632
782,-19818655.755054,1.980982
783,-19818664.868070,9.113016
784,-19818663.517657,1.350413
785,-19818665.655964,2.138307
786,-19818670.547042,4.891079
787,-19818671.583371,1.036329
788,-19818670.958930,0.624441
789,-19818671.705539,0.746609
790,-19818675.908398,4.202859
791,-19818674.622671,1.285727
792,-19818673.978244,0.644427
793,-19818677.780931,3.802687
794,-19818677.878955,0.098024
795,-19818675.987644,1.891311
796,-19818675.747470,0.240174
797,-19818680.633554,4.886084
798,-19818681.244289,0.610735
799,-19818681.781960,0.537671
800,-19818682.442246,0.660286
801,-19818683.337018,0.894771
802,-19818684.513193,1.176175
803,-19818685.665352,1.152159
804,-19818686.520699,0.855347
805,-19818686.907560,0.386861
806,-19818687.003313,0.095753
807,-19818687.318616,0.315303
808,-19818687.253201,0.065416
809,-19818686.887419,0.365781
810,-19818686.369417,0.518002
811,-19818679.060812,7.308605
812,-19818676.496165,2.564647
813,-19818677.320193,0.824028
814,-19818676.223933,1.096260
815,-19818680.396905,4.172973
816,-19818687.958899,7.561993
817,-19818688.951639,0.992741
818,-19818689.149960,0.198321
819,-19818689.427953,0.277993
820,-19818689.762603,0.334649
821,-19818690.444408,0.681805
822,-19818691.074497,0.630089
823,-19818691.713962,0.639465
824,-19818692.305351,0.591389
825,-19818692.846496,0.541146
826,-19818692.904166,0.057670
827,-19818692.566998,0.337168
828,-19818692.497572,0.069426
829,-19818692.599243,0.101671
830,-19818692.639223,0.039980
831,-19818692.532291,0.106932
832,-19818692.251095,0.281196
833,-19818691.917477,0.333618
834,-19818691.973623,0.056145
835,-19818691.999699,0.026076
836,-19818691.218466,0.781232
837,-19818691.000150,0.218316
838,-19818691.112649,0.112498
839,-19818691.157304,0.044655
840,-19818691.041418,0.115886
841,-19818690.726081,0.315337
842,-19818690.195262,0.530819
843,-19818689.582160,0.613102
844,-19818689.298446,0.283714
845,-19818689.615263,0.316816
846,-19818690.287682,0.672419
847,-19818691.001736,0.714055
848,-19818691.584908,0.583172
849,-19818691.897531,0.312622
850,-19818691.754707,0.142824
851,-19818691.329892,0.424815
852,-19818691.471939,0.142047
853,-19818691.511698,0.039760
854,-19818691.049042,0.462656
855,-19818690.207484,0.841557
856,-19818691.230672,1.023187
857,-19818692.795429,1.564758
858,-19818694.871400,2.075971
859,-19818696.626248,1.754848
860,-19818698.005860,1.379612
861,-19818698.880333,0.874473
862,-19818699.424675,0.544342
863,-19818699.781247,0.356572
864,-19818700.032359,0.251113
865,-19818700.220355,0.187995
866,-19818700.367688,0.147333
867,-19818700.485630,0.117943
868,-19818700.581340,0.095710
869,-19818700.658522,0.077182
870,-19818700.719939,0.061417
871,-19818700.768266,0.048327
872,-19818700.804721,0.036454
873,-19818700.829435,0.024714
874,-19818700.843140,0.013705
875,-19818700.843287,0.000147
876,-19818700.829358,0.013930
877,-19818700.805707,0.023651
878,-19818700.799692,0.006015
879,-19818700.872911,0.073219
880,-19818701.062757,0.189846
881,-19818701.292847,0.230090
882,-19818701.460473,0.167626
883,-19818701.539623,0.079150
884,-19818701.570579,0.030956
885,-19818701.583883,0.013304
886,-19818701.576517,0.007366
887,-19818701.547078,0.029438
888,-19818701.504962,0.042116
889,-19818701.459676,0.045285
890,-19818701.419861,0.039815
891,-19818701.395424,0.024437
892,-19818701.397237,0.001813
893,-19818701.440253,0.043016
894,-19818701.549670,0.109417
895,-19818701.767554,0.217884
896,-19818702.153472,0.385918
897,-19818702.733865,0.580394
898,-19818703.268809,0.534944
899,-19818703.076295,0.192514
900,-19818702.090708,0.985587
901,-19818701.174817,0.915890
902,-19818700.564745,0.610072
903,-19818700.083393,0.481352
904,-19818699.642214,0.441180
905,-19818699.344600,0.297614
906,-19818699.218928,0.125672
907,-19818699.126340,0.092588
908,-19818699.096862,0.029478
909,-19818699.116705,0.019843
910,-19818699.146901,0.030197
911,-19818699.168677,0.021776
912,-19818699.176692,0.008015
913,-19818699.170975,0.005717
914,-19818699.153390,0.017585
915,-19818699.125294,0.028095
916,-19818699.088737,0.036557
917,-19818699.045538,0.043200
918,-19818698.996924,0.048613
919,-19818698.943800,0.053125
920,-19818698.886791,0.057008
921,-19818698.827237,0.059554
922,-19818698.765045,0.062192
923,-19818698.700642,0.064404
924,-19818698.634270,0.066372
925,-19818698.566486,0.067784
926,-19818698.496989,0.069497
927,-19818698.426644,0.070345
928,-19818698.355549,0.071095
929,-19818698.284279,0.071270
930,-19818698.214037,0.070242
931,-19818698.145935,0.068102
932,-19818698.082046,0.063890
933,-19818698.025148,0.056898
934,-19818697.978848,0.046300
935,-19818697.947820,0.031028
936,-19818697.937755,0.010065
937,-19818697.954818,0.017064
938,-19818698.002925,0.048107
939,-19818698.079574,0.076648
940,-19818698.171751,0.092177
941,-19818698.257573,0.085822
942,-19818698.318857,0.061284
943,-19818698.354807,0.035950
944,-19818698.377590,0.022783
945,-19818698.398237,0.020647
946,-19818698.421616,0.023379
947,-19818698.448644,0.027028
948,-19818698.479941,0.031297
949,-19818698.515226,0.035285
950,-19818698.554491,0.039265
951,-19818698.598006,0.043516
952,-19818698.645343,0.047337
953,-19818698.695952,0.050609
954,-19818698.749077,0.053125
955,-19818698.803635,0.054559
956,-19818698.857535,0.053900
957,-19818698.908822,0.051287
958,-19818698.955557,0.046735
959,-19818698.996703,0.041147
960,-19818699.030302,0.033599
961,-19818699.057551,0.027249
962,-19818699.079038,0.021487
963,-19818699.095969,0.016931
964,-19818699.109144,0.013175
965,-19818699.120266,0.011122
966,-19818699.129950,0.009684
967,-19818699.139120,0.009171
968,-19818699.148805,0.009685
969,-19818699.159581,0.010776
970,-19818699.172397,0.012816
971,-19818699.187320,0.014923
972,-19818699.205296,0.017977
973,-19818699.226549,0.021252
974,-19818699.251980,0.025431
975,-19818699.281346,0.029366
976,-19818699.314967,0.033621
977,-19818699.352724,0.037757
978,-19818699.394811,0.042086
979,-19818699.440825,0.046014
980,-19818699.490450,0.049625
981,-19818699.543364,0.052914
982,-19818699.599472,0.056109
983,-19818699.658475,0.059002
984,-19818699.721252,0.062778
985,-19818699.788588,0.067336
986,-19818699.861965,0.073377
987,-19818699.944778,0.082813
988,-19818700.041211,0.096433
989,-19818700.160807,0.119595
990,-19818700.319796,0.158990
991,-19818700.535828,0.216031
992,-19818700.751554,0.215727
993,-19818700.654756,0.096798
994,-19818700.240480,0.414276
995,-19818700.324292,0.083812
996,-19818700.907455,0.583163
997,-19818701.635099,0.727644
998,-19818702.376926,0.741826
999,-19818703.046179,0.669254
CONCOCT Finished, the log shows how it went.
496369 15512 128

------------------------------------------------------------------------------------------------------------------------
-----                                   merging 10kb fragments back into contigs                                   -----
------------------------------------------------------------------------------------------------------------------------

k87_7529161	[('227', 1), ('199', 1)], chosen: 227
k87_12114328	[('199', 4)]
k87_4099249	[('51', 2)]
k87_7871198	[('182', 3)]
k87_3804773	[('149', 2)]
k87_7043757	[('140', 3)]
k87_7976679	[('182', 2)]
k87_7117176	[('227', 2), ('130', 1)], chosen: 227
k87_2441770	[('140', 2)]
k87_7842985	[('227', 1), ('140', 3)], chosen: 140
k87_2670352	[('183', 2)]
k87_291838	[('64', 2)]
k87_6502093	[('182', 2)]
k87_1603839	[('130', 4)]
k87_1185665	[('227', 3)]
k87_6924763	[('227', 2)]
k87_11805725	[('227', 1), ('199', 9)], chosen: 199
k87_9054492	[('227', 1), ('130', 1)], chosen: 227
k87_2413730	[('176', 2)]
k87_19808	[('130', 4)]
k87_9268171	[('199', 2)]
k87_7552805	[('204', 4)]
k87_2190893	[('134', 3)]
k87_2140852	[('149', 3)]
k87_5945716	[('199', 2)]
k87_10403830	[('3', 2)]
k87_11114991	[('227', 2)]
k87_1961536	[('130', 1), ('172', 1)], chosen: 130
k87_6777473	[('182', 4)]
k87_9152931	[('199', 5)]
k87_5687107	[('130', 2)]
k87_5988705	[('227', 2), ('140', 1)], chosen: 227
k87_12114413	[('199', 6)]
k87_2225302	[('199', 2), ('148', 2)], chosen: 199
k87_1493574	[('15', 1), ('186', 1)], chosen: 15
k87_3988656	[('149', 2)]
k87_5707760	[('199', 2)]
k87_10826136	[('140', 4)]
k87_10437912	[('199', 3), ('104', 1)], chosen: 199
k87_6545054	[('15', 2)]
k87_5220625	[('227', 4)]
k87_6826464	[('182', 2)]
k87_7136626	[('199', 3)]
k87_7014776	[('140', 2)]
k87_11984099	[('140', 3)]
k87_12020588	[('96', 2)]
k87_3387802	[('172', 2)]
k87_2868983	[('199', 2)]
k87_802056	[('164', 2)]
k87_11857510	[('227', 10)]
k87_108086	[('227', 2)]
k87_2324550	[('130', 1), ('172', 4)], chosen: 172
k87_11254020	[('182', 4)]
k87_6352798	[('227', 2)]
k87_9811355	[('199', 2)]
k87_286367	[('227', 2)]
k87_4277666	[('182', 2)]
k87_9985298	[('199', 3)]
k87_4654682	[('182', 2)]
k87_1967889	[('227', 2)]
k87_8367948	[('15', 4)]
k87_7581346	[('182', 3)]
k87_9193077	[('199', 2)]
k87_7202034	[('199', 5)]
k87_3201489	[('130', 2), ('199', 1)], chosen: 130
k87_771868	[('182', 2)]
k87_1704402	[('227', 4)]
k87_4523360	[('224', 2)]
k87_8834292	[('101', 1), ('199', 1)], chosen: 101
k87_10058117	[('227', 2)]
k87_4450008	[('130', 3)]
k87_6070736	[('227', 3)]
k87_10731926	[('51', 2)]
k87_9200401	[('182', 4)]
k87_4755929	[('182', 2)]
k87_6121108	[('183', 3)]
k87_11592326	[('227', 2), ('130', 1)], chosen: 227
k87_8235193	[('182', 3), ('140', 1)], chosen: 182
k87_5499003	[('140', 3)]
k87_5839252	[('176', 2)]
k87_11311447	[('227', 21), ('167', 1), ('140', 3)], chosen: 227
k87_5621890	[('199', 2)]
k87_11944030	[('140', 19)]
k87_11587127	[('130', 1), ('172', 1)], chosen: 130
k87_802444	[('227', 2)]
k87_11975884	[('227', 2)]
k87_1541204	[('199', 2)]
k87_264558	[('199', 3)]
k87_2475139	[('51', 2)]
k87_4399993	[('104', 2)]
k87_9791782	[('130', 1), ('140', 2)], chosen: 140
k87_2384295	[('149', 2)]
k87_6571889	[('227', 4)]
k87_11297103	[('227', 1), ('183', 1), ('130', 1)], chosen: 227
k87_9672118	[('182', 2)]
k87_9927670	[('149', 5)]
k87_11673812	[('227', 1), ('140', 3)], chosen: 140
k87_7490492	[('199', 1), ('79', 3)], chosen: 79
k87_10109125	[('199', 2)]
k87_7038328	[('130', 2)]
k87_843215	[('227', 1), ('130', 1)], chosen: 227
k87_2655780	[('182', 2)]
k87_2963036	[('227', 3)]
k87_11297878	[('140', 3)]
k87_6744801	[('140', 2)]
k87_8558559	[('130', 2)]
k87_296125	[('182', 2)]
k87_7793105	[('227', 3)]
k87_1930267	[('182', 3)]
k87_7210739	[('140', 2)]
k87_1329586	[('227', 1), ('70', 1)], chosen: 227
k87_5065639	[('172', 3)]
k87_578622	[('182', 2)]
k87_3803983	[('15', 3)]
k87_9911839	[('182', 2)]
k87_6529802	[('140', 3)]
k87_4103103	[('227', 2)]
k87_11063033	[('140', 2)]
k87_2378581	[('227', 11)]
k87_11666452	[('15', 3)]
k87_5996636	[('140', 4)]
k87_1519022	[('172', 2)]
k87_6006944	[('199', 4)]
k87_4561503	[('140', 2)]
k87_204684	[('24', 2)]
k87_6956835	[('227', 2)]
k87_630487	[('227', 2)]
k87_7535232	[('130', 6)]
k87_776871	[('172', 2)]
k87_4014501	[('51', 2)]
k87_5894373	[('199', 2)]
k87_40784	[('140', 2)]
k87_2851962	[('87', 3)]
k87_4131228	[('199', 3)]
k87_2577263	[('140', 3)]
k87_6066794	[('182', 2)]
k87_11012861	[('149', 7)]
k87_10539791	[('183', 2)]
k87_7060496	[('227', 2)]
k87_11045304	[('85', 6)]
k87_1496931	[('140', 2)]
k87_969260	[('227', 3)]
k87_9553614	[('199', 2)]
k87_5988307	[('199', 2)]
k87_11470812	[('199', 3), ('148', 1)], chosen: 199
k87_11783411	[('130', 1), ('172', 2)], chosen: 172
k87_10158836	[('199', 2)]
k87_3898897	[('182', 3)]
k87_7256298	[('182', 4)]
k87_9379868	[('19', 6)]
k87_3735961	[('182', 2)]
k87_11195206	[('199', 4)]
k87_11545593	[('182', 5)]
k87_2385649	[('182', 3)]
k87_5308015	[('130', 2)]
k87_134305	[('140', 2)]
k87_1059633	[('183', 2)]
k87_2587177	[('140', 2)]
k87_10725186	[('140', 3)]
k87_313913	[('199', 2)]
k87_7708478	[('199', 3)]
k87_5711888	[('199', 2)]
k87_2385717	[('51', 2)]
k87_1915523	[('55', 3), ('140', 1)], chosen: 55
k87_5730937	[('227', 2), ('172', 3)], chosen: 172
k87_8991427	[('130', 4)]
k87_949630	[('182', 2)]
k87_2687906	[('199', 2)]
k87_6934429	[('130', 3)]
k87_10780108	[('140', 4)]
k87_4280772	[('140', 2)]
k87_7900168	[('227', 1), ('0', 1), ('140', 2)], chosen: 140
k87_8816112	[('167', 3)]
k87_7665132	[('182', 2)]
k87_5718245	[('182', 9)]
k87_2667908	[('61', 2)]
k87_7750575	[('227', 4)]
k87_10109286	[('176', 2)]
k87_4580159	[('182', 2)]
k87_10900140	[('199', 3)]
k87_8630794	[('199', 1), ('184', 3)], chosen: 184
k87_7980240	[('227', 3)]
k87_132116	[('227', 6), ('199', 1)], chosen: 227
k87_7800605	[('140', 2)]
k87_18493	[('104', 2)]
k87_10468249	[('227', 1), ('130', 3)], chosen: 130
k87_8640956	[('227', 3)]
k87_5465648	[('130', 2)]
k87_3524130	[('227', 1), ('140', 2), ('171', 1), ('79', 1)], chosen: 140
k87_4088716	[('199', 4)]
k87_5656303	[('182', 4)]
k87_4408018	[('15', 2)]
k87_400995	[('15', 2)]
k87_3262615	[('164', 3)]
k87_8113104	[('199', 3)]
k87_6607114	[('227', 1), ('87', 3)], chosen: 87
k87_5897306	[('227', 3)]
k87_3716442	[('130', 2), ('199', 2)], chosen: 130
k87_5567691	[('182', 2)]
k87_208427	[('130', 4)]
k87_458102	[('199', 4)]
k87_11500874	[('227', 3)]
k87_10075441	[('199', 2)]
k87_8163206	[('140', 3)]
k87_3928691	[('153', 2)]
k87_3793434	[('130', 2)]
k87_337693	[('140', 2)]
k87_8471104	[('104', 2)]
k87_1588018	[('87', 4)]
k87_395917	[('26', 2)]
k87_10664532	[('24', 5)]
k87_4882890	[('140', 2)]
k87_11280970	[('199', 3)]
k87_2699830	[('140', 2)]
k87_3423046	[('199', 3)]
k87_5031099	[('130', 1), ('199', 1)], chosen: 130
k87_3047160	[('104', 3)]
k87_10452284	[('140', 3)]
k87_9879599	[('182', 9)]
k87_4052130	[('51', 2)]
k87_2716582	[('172', 2)]
k87_5887838	[('130', 4)]
k87_11287292	[('140', 2)]
k87_7499531	[('140', 2)]
k87_6575666	[('182', 3)]
k87_7995329	[('182', 2)]
k87_2725584	[('199', 2)]
k87_6452994	[('149', 3)]
k87_85512	[('140', 6)]
k87_3052953	[('199', 3)]
k87_7403305	[('199', 3)]
k87_1901520	[('149', 2)]
k87_10834693	[('3', 3), ('130', 2)], chosen: 3
k87_2422971	[('15', 2)]
k87_2172773	[('140', 3)]
k87_6903088	[('130', 2), ('124', 2), ('172', 3), ('79', 1)], chosen: 172
k87_2278867	[('140', 3)]
k87_1598290	[('199', 2)]
k87_2471196	[('149', 2)]
k87_2058703	[('140', 4)]
k87_9111630	[('51', 4)]
k87_1951147	[('227', 2)]
k87_4022763	[('130', 2)]
k87_4934219	[('182', 3)]
k87_2121424	[('188', 3)]
k87_1776811	[('227', 2)]
k87_7265592	[('227', 3)]
k87_3181122	[('199', 2)]
k87_9630469	[('140', 3)]
k87_12036963	[('199', 3)]
k87_9074396	[('149', 4)]
k87_917046	[('182', 2)]
k87_1768794	[('130', 2)]
k87_3508101	[('130', 3), ('199', 1)], chosen: 130
k87_11398071	[('227', 2), ('199', 3)], chosen: 199
k87_3957061	[('182', 4)]
k87_2758603	[('140', 3)]
k87_10039997	[('130', 4)]
k87_3039882	[('182', 2)]
k87_3430907	[('182', 3)]
k87_1762479	[('182', 5)]
k87_9610373	[('199', 2)]
k87_9234665	[('8', 3)]
k87_12070997	[('219', 2)]
k87_961948	[('227', 4)]
k87_189807	[('130', 3)]
k87_4361675	[('182', 3)]
k87_5618394	[('172', 2)]
k87_2222136	[('140', 4)]
k87_3626538	[('140', 3)]
k87_9249168	[('227', 3)]
k87_2528618	[('182', 4)]
k87_6424565	[('199', 3)]
k87_7502950	[('182', 4)]
k87_9196942	[('130', 4)]
k87_410270	[('130', 5), ('172', 1)], chosen: 130
k87_4460188	[('15', 4)]
k87_8357792	[('182', 2)]
k87_9195766	[('104', 3)]
k87_5073389	[('140', 3)]
k87_1680221	[('140', 2)]
k87_5428870	[('219', 2)]
k87_5513203	[('5', 2)]
k87_5667399	[('140', 2)]
k87_4402980	[('74', 3), ('140', 1)], chosen: 74
k87_10544526	[('130', 2)]
k87_11986850	[('182', 2)]
k87_8730572	[('182', 2)]
k87_9571722	[('140', 2)]
k87_3865523	[('149', 4)]
k87_6224594	[('51', 2)]
k87_2775456	[('182', 2)]
k87_4580163	[('140', 3)]
k87_10437345	[('182', 4)]
k87_2203701	[('130', 2)]
k87_591493	[('199', 5)]
k87_6801153	[('199', 2)]
k87_1230584	[('227', 1), ('130', 1)], chosen: 227
k87_2135696	[('227', 2)]
k87_2535383	[('199', 3)]
k87_5408874	[('199', 2)]
k87_12114493	[('140', 4)]
k87_9127007	[('182', 2)]
k87_5064818	[('182', 3)]
k87_686984	[('199', 2)]
k87_12114389	[('227', 3)]
k87_5878288	[('199', 4)]
k87_6919114	[('182', 4)]
k87_6004389	[('149', 2)]
k87_713014	[('140', 3)]
k87_11194398	[('199', 2)]
k87_4461146	[('130', 2)]
k87_3274054	[('140', 2)]
k87_6676784	[('172', 2)]
k87_7327661	[('182', 2)]
k87_1908327	[('15', 2)]
k87_11587053	[('199', 5)]
k87_11088163	[('199', 2)]
k87_2281389	[('183', 2)]
k87_7899840	[('140', 6)]
k87_3934572	[('130', 2), ('172', 1)], chosen: 130
k87_4891471	[('130', 4)]
k87_11601246	[('227', 1), ('2', 1), ('199', 3)], chosen: 199
k87_1834825	[('140', 2)]
k87_2093983	[('172', 2)]
k87_5171800	[('130', 2)]
k87_5318906	[('140', 2)]
k87_3229667	[('172', 2)]
k87_2507592	[('183', 3)]
k87_4000250	[('182', 2)]
k87_3278155	[('182', 3)]
k87_10002991	[('87', 2)]
k87_416650	[('140', 4)]
k87_9386983	[('51', 2)]
k87_3430963	[('149', 2)]
k87_5957356	[('199', 5)]
k87_7757378	[('140', 5)]
k87_5972183	[('182', 3)]
k87_11981067	[('140', 3)]
k87_8052789	[('130', 1), ('89', 2), ('79', 1)], chosen: 89
k87_3805499	[('199', 2)]
k87_5886645	[('15', 16)]
k87_8737879	[('51', 2)]
k87_6119575	[('149', 3)]
k87_400712	[('34', 8)]
k87_6812106	[('24', 3)]
k87_215355	[('26', 3)]
k87_10613439	[('182', 2)]
k87_10374002	[('182', 2)]
k87_404006	[('227', 1), ('199', 1)], chosen: 227
k87_7878201	[('140', 2)]
k87_12114344	[('227', 3), ('199', 1)], chosen: 227
k87_1549639	[('130', 4)]
k87_11489732	[('199', 2)]
k87_7495128	[('140', 3)]
k87_11401810	[('227', 2)]
k87_2629355	[('140', 3)]
k87_7408383	[('227', 5), ('130', 8), ('199', 16), ('172', 2)], chosen: 199
k87_5197146	[('227', 1), ('130', 2)], chosen: 130
k87_949259	[('3', 2)]
k87_483591	[('3', 2)]
k87_11374798	[('130', 1), ('140', 3)], chosen: 140
k87_2799019	[('199', 4)]
k87_11548732	[('199', 5)]
k87_5389929	[('182', 3)]
k87_2790435	[('182', 2), ('140', 3)], chosen: 140
k87_8530898	[('182', 4)]
k87_3625248	[('199', 2)]
k87_5972734	[('182', 2)]
k87_12114367	[('183', 1), ('199', 1), ('148', 1)], chosen: 183
k87_3802741	[('140', 3)]
k87_1050429	[('182', 2)]
k87_1517975	[('104', 2)]
k87_3539854	[('199', 2)]
k87_11277042	[('133', 1), ('130', 1)], chosen: 133
k87_6902693	[('182', 2)]
k87_3802343	[('182', 5)]
k87_8178751	[('130', 2)]
k87_10510690	[('227', 2), ('130', 2)], chosen: 227
k87_4091156	[('182', 2)]
k87_8520492	[('130', 1), ('172', 1)], chosen: 130
k87_12114298	[('227', 4)]
k87_12114297	[('227', 2), ('199', 1)], chosen: 227
k87_2186509	[('182', 3)]
k87_9401974	[('199', 2)]
k87_8176210	[('227', 1), ('130', 3), ('199', 1)], chosen: 130
k87_1409039	[('140', 2)]
k87_1148038	[('182', 2)]
k87_10895602	[('199', 4)]
k87_6023626	[('15', 2)]
k87_11473719	[('182', 6)]
k87_9520311	[('227', 2)]
k87_5839034	[('227', 2), ('130', 1)], chosen: 227
k87_4994120	[('227', 1), ('130', 2)], chosen: 130
k87_10708157	[('130', 3)]
k87_889209	[('182', 2)]
k87_193909	[('199', 2)]
k87_5712823	[('51', 2)]
k87_5343445	[('227', 2)]
k87_2321476	[('130', 2)]
k87_3073500	[('130', 4)]
k87_8297429	[('140', 5)]
k87_9290140	[('227', 2), ('199', 4)], chosen: 199
k87_12114377	[('130', 2), ('16', 2)], chosen: 130
k87_11410308	[('24', 1), ('227', 2)], chosen: 227
k87_5817282	[('227', 3)]
k87_6387232	[('227', 3)]
k87_9673221	[('130', 3)]
k87_3816746	[('182', 4)]
k87_106029	[('140', 2)]
k87_12096757	[('140', 2)]
k87_8399246	[('176', 1), ('140', 2)], chosen: 140
k87_12114304	[('140', 4)]
k87_3038116	[('182', 2)]
k87_1093582	[('183', 1), ('199', 1)], chosen: 183
k87_8378267	[('130', 2)]
k87_10075182	[('51', 2)]
k87_5714772	[('219', 2)]
k87_3406501	[('140', 2)]
k87_1948069	[('199', 2)]
k87_855279	[('153', 1), ('199', 1)], chosen: 153
k87_2796237	[('182', 2)]
k87_391189	[('182', 4)]
k87_1636277	[('140', 2)]
k87_9354207	[('140', 2)]
k87_5352145	[('182', 2)]
k87_10936421	[('227', 2)]
k87_11042111	[('192', 4)]
k87_8573689	[('199', 2)]
k87_574074	[('76', 1), ('199', 1)], chosen: 76
k87_11759407	[('130', 4)]
k87_9647065	[('183', 2)]
k87_4670134	[('199', 7)]
k87_1977942	[('149', 2)]
k87_3119982	[('183', 2)]
k87_7892329	[('64', 2)]
k87_6447377	[('227', 2)]
k87_1912262	[('227', 7)]
k87_11928710	[('227', 2)]
k87_12114341	[('130', 1), ('199', 2)], chosen: 199
k87_8816370	[('130', 2)]
k87_11325719	[('227', 1), ('183', 1)], chosen: 227
k87_8614644	[('227', 1), ('199', 3)], chosen: 199
k87_7123495	[('140', 11)]
k87_1236965	[('130', 2)]
k87_11317032	[('104', 2)]
k87_3748700	[('140', 3)]
k87_3034874	[('172', 2), ('140', 1)], chosen: 172
k87_8927664	[('140', 2)]
k87_2156788	[('199', 3)]
k87_5978130	[('137', 2)]
k87_12070031	[('199', 4)]
k87_7254373	[('15', 2)]
k87_9221630	[('182', 3)]
k87_4005971	[('227', 1), ('183', 2)], chosen: 183
k87_5688617	[('140', 2)]
k87_8090031	[('182', 3)]
k87_3700636	[('83', 2)]
k87_8096676	[('182', 3)]
k87_2959660	[('140', 3)]
k87_9043688	[('227', 1), ('74', 8)], chosen: 74
k87_1380919	[('172', 4)]
k87_12005796	[('149', 6)]
k87_8100955	[('227', 1), ('199', 2)], chosen: 199
k87_417928	[('183', 2)]
k87_8929536	[('227', 2)]
k87_2375239	[('227', 2)]
k87_7581537	[('149', 2)]
k87_2600464	[('227', 2)]
k87_10639389	[('182', 4)]
k87_11762839	[('227', 3)]
k87_6429608	[('227', 3)]
k87_2373784	[('104', 3)]
k87_4649330	[('130', 3)]
k87_6829215	[('149', 2)]
k87_7428550	[('183', 3)]
k87_1347241	[('227', 2)]
k87_7361673	[('51', 6)]
k87_1174712	[('227', 2)]
k87_3812694	[('149', 2)]
k87_4752052	[('182', 2)]
k87_8172958	[('130', 2)]
k87_12114350	[('227', 2), ('130', 3)], chosen: 130
k87_12114352	[('199', 6)]
k87_12114359	[('199', 4)]
k87_8882686	[('227', 2), ('130', 1), ('199', 2)], chosen: 227
k87_6071557	[('172', 3)]
k87_6451519	[('182', 3)]
k87_7702989	[('182', 3)]
k87_3633413	[('199', 2)]
k87_8602603	[('227', 2)]
k87_10735373	[('199', 2)]
k87_10547286	[('104', 2)]
k87_593965	[('140', 2)]
k87_7016915	[('227', 1), ('140', 3)], chosen: 140
k87_5990165	[('227', 2)]
k87_3835288	[('183', 1), ('130', 1)], chosen: 183
k87_9180377	[('140', 3)]
k87_11674467	[('199', 2)]
k87_12114418	[('227', 4)]
k87_11729149	[('227', 2)]
k87_9887838	[('182', 2)]
k87_875278	[('182', 1), ('140', 2)], chosen: 140
k87_7070249	[('182', 3)]
k87_3535527	[('140', 4)]
k87_10010719	[('182', 2)]
k87_11291691	[('182', 3)]
k87_8816948	[('140', 7)]
k87_5570235	[('130', 4)]
k87_10050079	[('182', 2)]
k87_5231788	[('78', 4)]
k87_9592413	[('199', 5)]
k87_6158949	[('182', 3)]
k87_4470779	[('130', 2)]
k87_11206443	[('15', 6)]
k87_5793584	[('51', 2)]
k87_7687568	[('140', 2)]
k87_8843402	[('34', 4)]
k87_1363027	[('199', 2)]
k87_3216052	[('130', 4)]
k87_6400437	[('140', 3)]
k87_12114327	[('227', 4)]
k87_12114329	[('199', 7)]
k87_1091832	[('130', 3)]
k87_10338600	[('227', 2)]
k87_10775932	[('182', 3)]
k87_106889	[('130', 2), ('140', 3)], chosen: 140
k87_4394473	[('183', 2)]
k87_9669399	[('130', 4)]
k87_1526408	[('61', 4)]
k87_10142452	[('51', 2)]
k87_7405750	[('140', 2)]
k87_5544842	[('124', 2)]
k87_951984	[('199', 2)]
k87_8097404	[('140', 6)]
k87_2182491	[('199', 2)]
k87_4836103	[('140', 5)]
k87_4014141	[('15', 2)]
k87_8633502	[('51', 2)]
k87_11999398	[('140', 4)]
k87_4276508	[('182', 2)]
k87_6740486	[('182', 2)]
k87_9222691	[('227', 2)]
k87_8302714	[('227', 5)]
k87_11832469	[('182', 2)]
k87_4168542	[('227', 2)]
k87_3902931	[('51', 2)]
k87_7585249	[('140', 3)]
k87_1333975	[('130', 7)]
k87_9484207	[('227', 2)]
k87_3030608	[('130', 1), ('199', 1)], chosen: 130
k87_2328789	[('227', 1), ('130', 2)], chosen: 130
k87_7400883	[('0', 1), ('140', 3)], chosen: 140
k87_8909990	[('140', 4)]
k87_1924273	[('182', 6)]
k87_12114339	[('15', 2)]
k87_12114332	[('227', 1), ('199', 3)], chosen: 199
k87_12114331	[('130', 4)]
k87_12114336	[('227', 4)]
k87_5029356	[('130', 4)]
k87_12114464	[('130', 1), ('172', 4)], chosen: 172
k87_2124720	[('140', 2)]
k87_770658	[('3', 2)]
k87_5067783	[('61', 2)]
k87_496799	[('140', 4)]
k87_6070292	[('227', 3)]
k87_12114351	[('227', 2), ('199', 2)], chosen: 227
k87_12114354	[('140', 4)]
k87_11395198	[('15', 4)]
k87_6730957	[('51', 2)]
k87_2414675	[('227', 5)]
k87_10636923	[('140', 3)]
k87_9200133	[('182', 3)]
k87_5482705	[('97', 1), ('140', 2)], chosen: 140
k87_3070119	[('227', 1), ('140', 1)], chosen: 227
k87_12114525	[('130', 3)]
k87_1711605	[('227', 1), ('140', 1)], chosen: 227
k87_11576373	[('140', 3)]
k87_6811250	[('227', 1), ('140', 1)], chosen: 227
k87_7982476	[('140', 3)]
k87_4734076	[('140', 2)]
k87_4361457	[('227', 2)]
k87_8437107	[('51', 2)]
k87_3986954	[('186', 4)]
k87_4767750	[('15', 2)]
k87_10715281	[('140', 2)]
k87_1748525	[('104', 5)]
k87_2491711	[('182', 3)]
k87_9777652	[('199', 2)]
k87_8806551	[('227', 4), ('130', 1), ('172', 1)], chosen: 227
k87_8639630	[('130', 9)]
k87_10286923	[('182', 1), ('140', 4)], chosen: 140
k87_41432	[('104', 3)]
k87_5912775	[('199', 6)]
k87_6105339	[('130', 2), ('172', 2)], chosen: 130
k87_604795	[('227', 2), ('140', 2)], chosen: 227
k87_7653978	[('130', 1), ('140', 1)], chosen: 130
k87_12114308	[('28', 7)]
k87_11564855	[('182', 5)]
k87_191417	[('182', 2)]
k87_10333547	[('104', 4)]
k87_8637901	[('130', 4)]
k87_11280390	[('153', 2)]
k87_7878077	[('74', 5)]
k87_6385811	[('140', 2)]
k87_6306229	[('130', 4)]
k87_1380588	[('140', 2)]
k87_8721563	[('15', 2)]
k87_9107988	[('182', 7)]
k87_4794259	[('130', 2)]
k87_6582980	[('227', 2)]
k87_4285679	[('199', 4)]
k87_8071218	[('182', 4)]
k87_3433313	[('227', 2)]
k87_12000364	[('182', 2)]
k87_10558592	[('182', 2)]
k87_9134985	[('182', 3)]
k87_2761082	[('182', 2)]
k87_3035268	[('140', 7)]
k87_3178677	[('128', 3)]
k87_4481987	[('182', 2)]
k87_6751402	[('199', 2)]
k87_9536910	[('183', 7)]
k87_2857187	[('182', 2)]
k87_9218000	[('130', 2), ('172', 1)], chosen: 130
k87_7021877	[('199', 2)]
k87_1219311	[('227', 8)]
k87_8198290	[('140', 2)]
k87_8751104	[('130', 6), ('184', 1)], chosen: 130
k87_882194	[('199', 2)]
k87_896154	[('149', 2)]
k87_12114404	[('130', 2), ('172', 4)], chosen: 172
k87_12114406	[('176', 1), ('140', 8)], chosen: 140
k87_12114622	[('227', 3), ('140', 1)], chosen: 227
k87_12114317	[('227', 4)]
k87_11468652	[('227', 3)]
k87_1485806	[('130', 3)]
k87_4114832	[('140', 2)]
k87_10682356	[('182', 3)]
k87_2405001	[('199', 2)]
k87_3062626	[('182', 2)]
k87_1633733	[('227', 2)]
k87_6458310	[('182', 3)]
k87_4584912	[('104', 4)]
k87_1836845	[('182', 2), ('140', 1)], chosen: 182
k87_12114397	[('140', 5)]
k87_7968624	[('183', 1), ('199', 2)], chosen: 199
k87_1852858	[('227', 2)]
k87_6119939	[('130', 4)]
k87_6830376	[('182', 9)]
k87_8829521	[('51', 2)]
k87_9467956	[('140', 3)]
k87_5312842	[('227', 3), ('130', 1)], chosen: 227
k87_2668672	[('140', 2)]
k87_8093050	[('199', 3)]
k87_2389925	[('130', 1), ('199', 2)], chosen: 199
k87_2240354	[('182', 2)]
k87_7213790	[('227', 3)]
k87_10741300	[('140', 2)]
k87_6161902	[('120', 2)]
k87_4505157	[('227', 1), ('183', 1)], chosen: 227
k87_4363324	[('199', 3)]
k87_6640179	[('51', 3)]
k87_12114474	[('182', 2), ('140', 2)], chosen: 182
k87_1145227	[('199', 4)]
k87_8254110	[('126', 1), ('140', 2)], chosen: 140
k87_7098487	[('182', 3)]
k87_11290802	[('51', 2)]
k87_7978356	[('182', 2)]
k87_4140640	[('227', 3), ('130', 1)], chosen: 227
k87_10647382	[('182', 2)]
k87_10438299	[('140', 3)]
k87_11705645	[('227', 2)]
k87_5881507	[('140', 4)]
k87_7539941	[('182', 2)]
k87_11396767	[('140', 2)]
k87_8908943	[('176', 2)]
k87_10711740	[('182', 2)]
k87_2845139	[('182', 4)]
k87_2845761	[('199', 2)]
k87_4102006	[('227', 2), ('130', 2)], chosen: 227
k87_5836496	[('227', 1), ('130', 1)], chosen: 227
k87_8778072	[('51', 2)]
k87_10096686	[('182', 2)]
k87_2416014	[('199', 3)]
k87_8587239	[('227', 1), ('140', 1)], chosen: 227
k87_7662996	[('227', 2), ('130', 1), ('172', 1)], chosen: 227
k87_8268416	[('64', 2)]
k87_4987213	[('172', 2)]
k87_2185738	[('182', 2)]
k87_3933527	[('183', 2)]
k87_9969596	[('176', 2)]
k87_10425042	[('199', 3)]
k87_7080433	[('227', 3)]
k87_10186330	[('140', 2)]
k87_11534167	[('227', 4)]
k87_2407908	[('104', 2)]
k87_11058168	[('182', 2)]
k87_6068239	[('140', 2)]
k87_3146414	[('183', 4)]
k87_9128349	[('140', 2)]
k87_3677141	[('183', 4)]
k87_3889219	[('199', 2)]
k87_6759131	[('227', 1), ('140', 1)], chosen: 227
k87_4696390	[('182', 3)]
k87_8590122	[('130', 4)]
k87_5288567	[('130', 4)]
k87_11795259	[('140', 2)]
k87_12114347	[('199', 4)]
k87_2715944	[('140', 3)]
k87_5985103	[('182', 1), ('140', 2)], chosen: 140
k87_8609236	[('130', 2)]
k87_4532996	[('130', 4)]
k87_5446448	[('184', 2)]
k87_4655020	[('140', 4)]
k87_1866192	[('199', 2)]
k87_12114433	[('130', 4)]
k87_8829032	[('182', 4)]
k87_1540101	[('183', 1), ('199', 1)], chosen: 183
k87_7050950	[('140', 5)]
k87_4791072	[('183', 3)]
k87_9365758	[('134', 4)]
k87_7587114	[('182', 2)]
k87_11382663	[('140', 2)]
k87_2319567	[('130', 2)]
k87_12114346	[('227', 3)]
k87_12025764	[('104', 2)]
k87_8730911	[('33', 2)]
k87_9850332	[('140', 3)]
k87_2009903	[('182', 2)]
k87_9550480	[('227', 6)]
k87_4279441	[('182', 2)]
k87_2871192	[('204', 4)]
k87_3672692	[('140', 2)]
k87_9824104	[('182', 2)]
k87_9257040	[('183', 4), ('199', 1)], chosen: 183
k87_962650	[('149', 3)]
k87_490279	[('130', 3)]
k87_6382796	[('124', 2)]
k87_677774	[('182', 2)]
k87_7428276	[('227', 3)]
k87_9611322	[('227', 4), ('130', 1)], chosen: 227
k87_11957136	[('199', 4)]
k87_6087038	[('130', 2)]
k87_9813059	[('199', 2)]
k87_7886175	[('182', 1), ('176', 1), ('140', 1)], chosen: 182
k87_7852266	[('183', 4), ('199', 2)], chosen: 183
k87_2092311	[('140', 3)]
k87_788687	[('130', 4)]
k87_11197686	[('227', 2)]
k87_9399275	[('183', 2)]
k87_7777836	[('15', 2)]
k87_9713791	[('130', 3)]
k87_2116175	[('74', 6)]
k87_1909372	[('227', 3)]
k87_569477	[('130', 1), ('199', 14)], chosen: 199
k87_8074781	[('199', 2)]
k87_4820209	[('130', 1), ('172', 1)], chosen: 130
k87_10396474	[('140', 3)]
k87_11411917	[('182', 2)]
k87_9931741	[('15', 2)]
k87_3518411	[('140', 2)]
k87_7061098	[('182', 3)]
k87_672385	[('227', 2)]
k87_11318272	[('227', 2)]
k87_4868992	[('227', 1), ('130', 1)], chosen: 227
k87_8010144	[('15', 2)]
k87_433951	[('140', 3)]
k87_9603531	[('182', 3)]
k87_5316226	[('227', 1), ('183', 1)], chosen: 227
k87_3543521	[('182', 1), ('172', 2), ('140', 2)], chosen: 172
k87_3728145	[('130', 2)]
k87_10053145	[('80', 2)]
k87_9182126	[('183', 2), ('199', 1)], chosen: 183
k87_4845163	[('140', 3)]
k87_4623404	[('140', 9)]
k87_11343351	[('227', 1), ('167', 1)], chosen: 227
k87_2995197	[('182', 2)]
k87_2314283	[('130', 2)]
k87_10179273	[('199', 2)]
k87_6824567	[('182', 3)]
k87_2957939	[('182', 2)]
k87_8825069	[('199', 3)]
k87_317718	[('182', 2)]
k87_2832522	[('3', 2)]
k87_6529293	[('51', 2)]
k87_4536173	[('183', 2)]
k87_7770943	[('199', 2)]
k87_1563817	[('227', 3)]
k87_4118630	[('182', 3)]

------------------------------------------------------------------------------------------------------------------------
-----                                          splitting contigs into bins                                         -----
------------------------------------------------------------------------------------------------------------------------

Loading in the bins that the contigs belong to...
Going through the entire assembly and splitting contigs into their respective bin file...
Done!

------------------------------------------------------------------------------------------------------------------------
-----                              CONCOCT finished successfully, and found 232 bins!                              -----
------------------------------------------------------------------------------------------------------------------------


########################################################################################################################
#####                                   BINNING PIPELINE SUCCESSFULLY FINISHED!!!                                  #####
########################################################################################################################


real	1280m21.569s
user	11048m35.120s
sys	10273m53.068s
